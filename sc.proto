syntax = "proto3";

package sc_service;

option go_package = "sc_service/sc_service;sc_service";
import "google/api/annotations.proto";

// =======================================
service BlockchainService {
  // Konfigurasi Blockchain
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {
    option (google.api.http) = {
      post: "/api/v1/blockchain/config"
      body: "*"
    };
  }
  rpc GetNetworkID(Empty) returns (NetworkIDResponse) {
    option (google.api.http) = {
      get: "/api/v1/blockchain/network_id"
    };
  }
  
  // Transaksi ETH & Token
  rpc SendETH(SendETHRequest) returns (SendETHResponse) {
    option (google.api.http) = {
      post: "/api/v1/blockchain/send_eth"
      body: "*"
    };
  }
  // Tidak berlaku di Ganache
  rpc GetTokenBalance(GetTokenBalanceRequest) returns (GetTokenBalanceResponse) {
    option (google.api.http) = {
      get: "/api/v1/blockchain/token_balance"
    };
  }
  rpc TransferToken(TransferTokenRequest) returns (TransferTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/blockchain/transfer_token"
      body: "*"
    };
  }
  // rpc ApproveToken(ApproveTokenRequest) returns (ApproveTokenResponse);
  // rpc GetTokenAllowance(GetTokenAllowanceRequest) returns (GetTokenAllowanceResponse);
  // // Interaksi Smart Contract
  // rpc DeployContract(DeployContractRequest) returns (DeployContractResponse);
  // rpc GetContract(GetContractRequest) returns (GetContractResponse);
  // rpc CallContractMethod(CallContractMethodRequest) returns (CallContractMethodResponse);
  // rpc SendTransactionToContract(SendTransactionToContractRequest) returns (SendTransactionToContractResponse);
  // rpc GetContractOwner(GetContractOwnerRequest) returns (GetContractOwnerResponse);
  
  // // Informasi Jaringan
  // rpc GetGasPrice(Empty) returns (GetGasPriceResponse);
  // rpc GetNonce(GetNonceRequest) returns (GetNonceResponse);
  rpc ApproveToken(ApproveTokenRequest) returns (ApproveTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/token/approve"
      body: "*"
    };
  }

  rpc GetTokenAllowance(GetTokenAllowanceRequest) returns (GetTokenAllowanceResponse) {
    option (google.api.http) = {
      get: "/api/v1/token/allowance"
    };
  }
 // Interaksi Smart Contract
  rpc DeployIjazahContract(DeployIjazahContractRequest) returns (DeployIjazahContractResponse) {
    option (google.api.http) = {
      post: "/api/v1/contract/deploy"
      body: "*"
    };
  }
 

  // ====================================================
// ================CONTRACT MANAGEMENT================
  rpc GetContract(GetContractRequest) returns (GetContractResponse) {
    option (google.api.http) = {
      get: "/api/v1/contract/{contract_address}"
    };
  }

  rpc CallContractMethod(CallContractMethodRequest) returns (CallContractMethodResponse) {
    option (google.api.http) = {
      post: "/api/v1/contract/call"
      body: "*"
    };
  }

  rpc SendTransactionToContract(SendTransactionToContractRequest) returns (SendTransactionToContractResponse) {
    option (google.api.http) = {
      post: "/api/v1/contract/send"
      body: "*"
    };
  }

  rpc GetContractOwner(GetContractOwnerRequest) returns (GetContractOwnerResponse) {
    option (google.api.http) = {
      get: "/api/v1/contract/{contract_address}/owner"
    };
  }

  rpc GetContractEvents(GetContractEventsRequest) returns (GetContractEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/contract/{contract_address}/events"
    };
  }
  // ====================================================
  
  // ====================================================
  // =====================TOKEN==========================
  rpc GetGasPrice(Empty) returns (GetGasPriceResponse) {
    option (google.api.http) = {
      get: "/api/v1/gas/price"
    };
  }

  rpc GetNonce(GetNonceRequest) returns (GetNonceResponse) {
    option (google.api.http) = {
      get: "/api/v1/nonce/{address}"
    };
  }
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse) {
    option (google.api.http) = {
      get: "/api/v1/transaction/{tx_hash}/status"
    };
  }


}

// Definisi pesan-pesan yang digunakan dalam request & response

message Empty {}

message SetConfigRequest {
  BCNetwork network = 1;
  // string blockchain_type = 1;
  // string rpc_url = 2;
}

message SetConfigResponse {
  string message = 1;
}

message NetworkIDResponse {
  uint32 network_id = 1;
}

message SendETHRequest {
  string from = 1;
  string to = 2;
  string amount = 3;
  string private_key = 4;
}

message SendETHResponse {
  string tx_hash = 1;
}

message GetTokenBalanceRequest {
  string token_address = 1;
  string owner_address = 2;
}

message GetTokenBalanceResponse {
  string balance = 1;
}

message TransferTokenRequest {
  string token_address = 1;
  string from = 2;
  string to = 3;
  string amount = 4;
  string private_key = 5;
  uint64 gas_limit = 6;
}

message TransferTokenResponse {
  string tx_hash = 1;
}

message ApproveTokenRequest {
  string token_address = 1;
  string spender = 2;
  string amount = 3;
  string private_key = 4;
  uint64 gas_limit = 5;
}

message ApproveTokenResponse {
  string tx_hash = 1;
}

message GetTokenAllowanceRequest {
  string token_address = 1;
  string owner = 2;
  string spender = 3;
}

message GetTokenAllowanceResponse {
  string allowance = 1;
}
// ==================================
// ============CONTRACT==============
enum BCAccountType {
  imported = 0;
  keystore = 1;
}
message DeployIjazahContractRequest {
  string private_key = 1;
  BlockchainAccount account = 2; 
  uint64 gas_limit = 3;
  string schemaname = 4;
  AdminSekolah admin_sekolah = 5;
  // string user_id = 4; 
  // string password = 5; 
}

message DeployIjazahContractResponse {
  string contract_address = 1;
  string tx_hash = 2;
}

message GetContractRequest {
  string contract_address = 1;
  string schemaname = 2;
}

message GetContractResponse {
  string contract_address = 1;
  string bytecode = 2;
  string abi = 3;
}

message CallContractMethodRequest {
  string contract_address = 1;
  string abi = 2;
  string method = 3;
  repeated string params = 4;
  string schemaname = 5;
}

message SendTransactionToContractRequest {
  string contract_address = 1;
  string abi = 2;
  string method = 3;
  repeated string params = 4;
  string private_key = 5;
  uint64 gas_limit = 6;
  string schemaname = 7;
}

message SendTransactionToContractResponse {
  string tx_hash = 1;
}

message GetContractOwnerRequest {
  string contract_address = 1;
  string abi = 2;
}

message GetContractOwnerResponse {
  string owner_address = 1;
}
message GetContractEventsRequest {
  string contract_address = 1;
  string abi = 2;
  string event_name = 3;
  uint64 from_block = 4;
  uint64 to_block = 5;
}

message GetContractEventsResponse {
  repeated string events = 1;
}
message CallContractMethodResponse {
  string result = 1;
}
// ==================================

message GetGasPriceResponse {
  string gas_price = 1;
}

message GetNonceRequest {
  string address = 1;
}

message GetNonceResponse {
  uint64 nonce = 1;
}

message GetTransactionStatusRequest {
  string tx_hash = 1;
}

message GetTransactionStatusResponse {
  string status = 1;
}


// ==================================
// ===========ACOUNT MANAGEMENT================
service BlockchainAccountService {
  rpc CreateBlockchainAccount(CreateBlockchainAccountRequest) returns (CreateBlockchainAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/blockchainaccount/create"
      body: "*"
    };
  }
  rpc ImportBlockchainAccount(ImportBlockchainAccountRequest) returns (ImportBlockchainAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/blockchainaccount/import"
      body: "*"
    };
  }
  rpc GetBlockchainAccounts(GetBlockchainAccountsRequest) returns (GetBlockchainAccountsResponse) {
    option (google.api.http) = {
      get: "/api/v1/blockchainaccount/list"
    };
  }
  rpc UpdateBlockchainAccount(UpdateBlockchainAccountRequest) returns (UpdateBlockchainAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/blockchainaccount/update"
      body: "*"
    };
  }
  rpc DeleteBlockchainAccount(DeleteBlockchainAccountRequest) returns (DeleteBlockchainAccountResponse) {
    option (google.api.http) = {
      delete: "/api/v1/blockchainaccount/delete"
    };
  }
  // ====================================================
}

message AdminSekolah {
  int32 sekolah_id=1;
  int32  user_id     =2;
  string password = 3;
  string nama_sekolah=4;
  string sekolah_id_enkrip = 5;
}


message BlockchainAccount {
	string        Address            = 1;
	string        Username           = 2;
	BCAccountType Type               = 3;
	int32         UserId             = 4;
	string        Password           = 5;
	string        KeystrokeFilename  = 6;
	uint32        NetworkId          = 7;
	BCNetwork     Network            = 8;
	string        Organization       = 9;
	bool          IsActive           = 10;
}

message CreateBlockchainAccountRequest {
  AdminSekolah admin = 1;
  BCNetwork network =2;
  string schemaname = 3;
}
message CreateBlockchainAccountResponse {
  bool status = 1;
  string message = 2; //contract_address
}
message ImportBlockchainAccountRequest {
  string private_key = 1;
  AdminSekolah admin = 2;
  BCNetwork network =3;
  string schemaname = 4;
}
message ImportBlockchainAccountResponse {
  bool status = 1;
  string message = 2; //contract_address
}
message GetBlockchainAccountsRequest {
  int32 user_id = 1;
  string schemaname = 2;
  uint32 network_id = 3;
}
message GetBlockchainAccountsResponse {
  bool status = 1;
  repeated BlockchainAccount blockchainaccounts = 2;
}
message DeleteBlockchainAccountRequest {
  int32 user_id = 1;
  string schemaname = 2;
}
message DeleteBlockchainAccountResponse {
  bool status = 1;
  string message = 2;
}
message UpdateBlockchainAccountRequest {
  string schemaname = 1;
  repeated BlockchainAccount blockchainaccounts = 2;
}
message UpdateBlockchainAccountResponse {
  string message = 1;
  bool status = 2;
}

// ==================================


service BlockchainNetworkService {
    // Konfigurasi Blockchain
    rpc CreateBCNetwork(CreateBCNetworkRequest) returns (CreateBCNetworkResponse) {
      option (google.api.http) = {
        post: "/api/v1/blockchain/create"
        body: "*"
      };
    }
    rpc GetBCNetwork(GetBCNetworkRequest) returns (GetBCNetworkResponse) {
      option (google.api.http) = {
        get: "/api/v1/blockchain/list"
      };
    }
    rpc UpdateBCNetwork(UpdateBCNetworkRequest) returns (UpdateBCNetworkResponse) {
      option (google.api.http) = {
        put: "/api/v1/blockchain/network"
        body:"*"
      };
    }
    rpc DeleteBCNetwork(DeleteNetworkRequest) returns (DeleteNetworkResponse) {
      option (google.api.http) = {
        delete: "/api/v1/blockchain/network"
      };
    }
}
enum NetworkType {
  mainnet = 0;
  testnet = 1;
  private = 2;
}
// ==================================
message BCNetwork {
  string Name        = 1;
  int64  ChainId     = 2;
  string RPCURL      = 3;
  string ExplorerURL = 4;
  string Symbol      = 5;
  NetworkType Type   = 6;
  bool Activate =7;
  bool Available =8;
  uint32 Id =9;
  string Architecture= 10;
}

message CreateBCNetworkRequest {
  repeated BCNetwork network = 1;
}
message CreateBCNetworkResponse {
  bool status = 1;
  string message = 2;
}
message GetBCNetworkRequest {
  string network_name = 1;
}
message GetBCNetworkResponse {
  repeated BCNetwork network = 1;
  bool status = 2;
  string message = 3;
}
message UpdateBCNetworkRequest {
  BCNetwork network = 1;
}
message UpdateBCNetworkResponse {
  bool status = 1;
  string message = 2;
}
message DeleteNetworkRequest {
  uint32 network_id = 1;
}
message DeleteNetworkResponse {
  bool status = 1;
  string message = 2;
}

service TenantService {
  rpc RegistrasiSekolahTenant (RegistrasiSekolahTenantRequest) returns (RegistrasiSekolahTenantResponse) {
    option (google.api.http) = {
      post: "/api/v1/t/registrasi-sekolah"
      body: "*"
    };
  }
  rpc GetSekolahTenant (GetSekolahTenantRequest) returns (GetSekolahTenantResponse) {
    option (google.api.http) = {
      get: "/api/v1/t/sekolah-terdaftar"
    };
  }
}  

message SekolahTenant {
  string	nama_sekolah  = 1;
  int32 	user_id       = 2;
  int32 	sekolah_id    = 3;
  string	schemaname   = 4;
}
message RegistrasiSekolahTenantRequest{
  SekolahTenant sekolah_tenant = 1;
}
message RegistrasiSekolahTenantResponse{
  string message = 1;
  bool status = 2;
}

message GetSekolahTenantRequest {
  int32 sekolah_id = 1;

}
message GetSekolahTenantResponse {
  SekolahTenant sekolah_tenant = 1;
}