// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: sekolah.proto

package sekolah

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TahunAjaranService_CreateTahunAjaran_FullMethodName = "/sekolah.TahunAjaranService/CreateTahunAjaran"
	TahunAjaranService_GetTahunAjaran_FullMethodName    = "/sekolah.TahunAjaranService/GetTahunAjaran"
	TahunAjaranService_UpdateTahunAjaran_FullMethodName = "/sekolah.TahunAjaranService/UpdateTahunAjaran"
	TahunAjaranService_DeleteTahunAjaran_FullMethodName = "/sekolah.TahunAjaranService/DeleteTahunAjaran"
)

// TahunAjaranServiceClient is the client API for TahunAjaranService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =============================================
// Generated Tahun Ajaran
// =============================================
type TahunAjaranServiceClient interface {
	// CRUD for TahunAjaran
	CreateTahunAjaran(ctx context.Context, in *CreateTahunAjaranRequest, opts ...grpc.CallOption) (*CreateTahunAjaranResponse, error)
	GetTahunAjaran(ctx context.Context, in *GetTahunAjaranRequest, opts ...grpc.CallOption) (*GetTahunAjaranResponse, error)
	UpdateTahunAjaran(ctx context.Context, in *UpdateTahunAjaranRequest, opts ...grpc.CallOption) (*UpdateTahunAjaranResponse, error)
	DeleteTahunAjaran(ctx context.Context, in *DeleteTahunAjaranRequest, opts ...grpc.CallOption) (*DeleteTahunAjaranResponse, error)
}

type tahunAjaranServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTahunAjaranServiceClient(cc grpc.ClientConnInterface) TahunAjaranServiceClient {
	return &tahunAjaranServiceClient{cc}
}

func (c *tahunAjaranServiceClient) CreateTahunAjaran(ctx context.Context, in *CreateTahunAjaranRequest, opts ...grpc.CallOption) (*CreateTahunAjaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTahunAjaranResponse)
	err := c.cc.Invoke(ctx, TahunAjaranService_CreateTahunAjaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tahunAjaranServiceClient) GetTahunAjaran(ctx context.Context, in *GetTahunAjaranRequest, opts ...grpc.CallOption) (*GetTahunAjaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTahunAjaranResponse)
	err := c.cc.Invoke(ctx, TahunAjaranService_GetTahunAjaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tahunAjaranServiceClient) UpdateTahunAjaran(ctx context.Context, in *UpdateTahunAjaranRequest, opts ...grpc.CallOption) (*UpdateTahunAjaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTahunAjaranResponse)
	err := c.cc.Invoke(ctx, TahunAjaranService_UpdateTahunAjaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tahunAjaranServiceClient) DeleteTahunAjaran(ctx context.Context, in *DeleteTahunAjaranRequest, opts ...grpc.CallOption) (*DeleteTahunAjaranResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTahunAjaranResponse)
	err := c.cc.Invoke(ctx, TahunAjaranService_DeleteTahunAjaran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TahunAjaranServiceServer is the server API for TahunAjaranService service.
// All implementations must embed UnimplementedTahunAjaranServiceServer
// for forward compatibility.
//
// =============================================
// Generated Tahun Ajaran
// =============================================
type TahunAjaranServiceServer interface {
	// CRUD for TahunAjaran
	CreateTahunAjaran(context.Context, *CreateTahunAjaranRequest) (*CreateTahunAjaranResponse, error)
	GetTahunAjaran(context.Context, *GetTahunAjaranRequest) (*GetTahunAjaranResponse, error)
	UpdateTahunAjaran(context.Context, *UpdateTahunAjaranRequest) (*UpdateTahunAjaranResponse, error)
	DeleteTahunAjaran(context.Context, *DeleteTahunAjaranRequest) (*DeleteTahunAjaranResponse, error)
	mustEmbedUnimplementedTahunAjaranServiceServer()
}

// UnimplementedTahunAjaranServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTahunAjaranServiceServer struct{}

func (UnimplementedTahunAjaranServiceServer) CreateTahunAjaran(context.Context, *CreateTahunAjaranRequest) (*CreateTahunAjaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTahunAjaran not implemented")
}
func (UnimplementedTahunAjaranServiceServer) GetTahunAjaran(context.Context, *GetTahunAjaranRequest) (*GetTahunAjaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTahunAjaran not implemented")
}
func (UnimplementedTahunAjaranServiceServer) UpdateTahunAjaran(context.Context, *UpdateTahunAjaranRequest) (*UpdateTahunAjaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTahunAjaran not implemented")
}
func (UnimplementedTahunAjaranServiceServer) DeleteTahunAjaran(context.Context, *DeleteTahunAjaranRequest) (*DeleteTahunAjaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTahunAjaran not implemented")
}
func (UnimplementedTahunAjaranServiceServer) mustEmbedUnimplementedTahunAjaranServiceServer() {}
func (UnimplementedTahunAjaranServiceServer) testEmbeddedByValue()                            {}

// UnsafeTahunAjaranServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TahunAjaranServiceServer will
// result in compilation errors.
type UnsafeTahunAjaranServiceServer interface {
	mustEmbedUnimplementedTahunAjaranServiceServer()
}

func RegisterTahunAjaranServiceServer(s grpc.ServiceRegistrar, srv TahunAjaranServiceServer) {
	// If the following call pancis, it indicates UnimplementedTahunAjaranServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TahunAjaranService_ServiceDesc, srv)
}

func _TahunAjaranService_CreateTahunAjaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTahunAjaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TahunAjaranServiceServer).CreateTahunAjaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TahunAjaranService_CreateTahunAjaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TahunAjaranServiceServer).CreateTahunAjaran(ctx, req.(*CreateTahunAjaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TahunAjaranService_GetTahunAjaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTahunAjaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TahunAjaranServiceServer).GetTahunAjaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TahunAjaranService_GetTahunAjaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TahunAjaranServiceServer).GetTahunAjaran(ctx, req.(*GetTahunAjaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TahunAjaranService_UpdateTahunAjaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTahunAjaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TahunAjaranServiceServer).UpdateTahunAjaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TahunAjaranService_UpdateTahunAjaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TahunAjaranServiceServer).UpdateTahunAjaran(ctx, req.(*UpdateTahunAjaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TahunAjaranService_DeleteTahunAjaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTahunAjaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TahunAjaranServiceServer).DeleteTahunAjaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TahunAjaranService_DeleteTahunAjaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TahunAjaranServiceServer).DeleteTahunAjaran(ctx, req.(*DeleteTahunAjaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TahunAjaranService_ServiceDesc is the grpc.ServiceDesc for TahunAjaranService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TahunAjaranService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.TahunAjaranService",
	HandlerType: (*TahunAjaranServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTahunAjaran",
			Handler:    _TahunAjaranService_CreateTahunAjaran_Handler,
		},
		{
			MethodName: "GetTahunAjaran",
			Handler:    _TahunAjaranService_GetTahunAjaran_Handler,
		},
		{
			MethodName: "UpdateTahunAjaran",
			Handler:    _TahunAjaranService_UpdateTahunAjaran_Handler,
		},
		{
			MethodName: "DeleteTahunAjaran",
			Handler:    _TahunAjaranService_DeleteTahunAjaran_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	SemesterService_CreateSemester_FullMethodName = "/sekolah.SemesterService/CreateSemester"
	SemesterService_GetSemester_FullMethodName    = "/sekolah.SemesterService/GetSemester"
	SemesterService_UpdateSemester_FullMethodName = "/sekolah.SemesterService/UpdateSemester"
	SemesterService_DeleteSemester_FullMethodName = "/sekolah.SemesterService/DeleteSemester"
)

// SemesterServiceClient is the client API for SemesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SemesterServiceClient interface {
	// CRUD for Semester
	CreateSemester(ctx context.Context, in *CreateSemesterRequest, opts ...grpc.CallOption) (*CreateSemesterResponse, error)
	GetSemester(ctx context.Context, in *GetSemesterRequest, opts ...grpc.CallOption) (*GetSemesterResponse, error)
	UpdateSemester(ctx context.Context, in *UpdateSemesterRequest, opts ...grpc.CallOption) (*UpdateSemesterResponse, error)
	DeleteSemester(ctx context.Context, in *DeleteSemesterRequest, opts ...grpc.CallOption) (*DeleteSemesterResponse, error)
}

type semesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSemesterServiceClient(cc grpc.ClientConnInterface) SemesterServiceClient {
	return &semesterServiceClient{cc}
}

func (c *semesterServiceClient) CreateSemester(ctx context.Context, in *CreateSemesterRequest, opts ...grpc.CallOption) (*CreateSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_CreateSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semesterServiceClient) GetSemester(ctx context.Context, in *GetSemesterRequest, opts ...grpc.CallOption) (*GetSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_GetSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semesterServiceClient) UpdateSemester(ctx context.Context, in *UpdateSemesterRequest, opts ...grpc.CallOption) (*UpdateSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_UpdateSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semesterServiceClient) DeleteSemester(ctx context.Context, in *DeleteSemesterRequest, opts ...grpc.CallOption) (*DeleteSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSemesterResponse)
	err := c.cc.Invoke(ctx, SemesterService_DeleteSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemesterServiceServer is the server API for SemesterService service.
// All implementations must embed UnimplementedSemesterServiceServer
// for forward compatibility.
type SemesterServiceServer interface {
	// CRUD for Semester
	CreateSemester(context.Context, *CreateSemesterRequest) (*CreateSemesterResponse, error)
	GetSemester(context.Context, *GetSemesterRequest) (*GetSemesterResponse, error)
	UpdateSemester(context.Context, *UpdateSemesterRequest) (*UpdateSemesterResponse, error)
	DeleteSemester(context.Context, *DeleteSemesterRequest) (*DeleteSemesterResponse, error)
	mustEmbedUnimplementedSemesterServiceServer()
}

// UnimplementedSemesterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSemesterServiceServer struct{}

func (UnimplementedSemesterServiceServer) CreateSemester(context.Context, *CreateSemesterRequest) (*CreateSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSemester not implemented")
}
func (UnimplementedSemesterServiceServer) GetSemester(context.Context, *GetSemesterRequest) (*GetSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSemester not implemented")
}
func (UnimplementedSemesterServiceServer) UpdateSemester(context.Context, *UpdateSemesterRequest) (*UpdateSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSemester not implemented")
}
func (UnimplementedSemesterServiceServer) DeleteSemester(context.Context, *DeleteSemesterRequest) (*DeleteSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSemester not implemented")
}
func (UnimplementedSemesterServiceServer) mustEmbedUnimplementedSemesterServiceServer() {}
func (UnimplementedSemesterServiceServer) testEmbeddedByValue()                         {}

// UnsafeSemesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SemesterServiceServer will
// result in compilation errors.
type UnsafeSemesterServiceServer interface {
	mustEmbedUnimplementedSemesterServiceServer()
}

func RegisterSemesterServiceServer(s grpc.ServiceRegistrar, srv SemesterServiceServer) {
	// If the following call pancis, it indicates UnimplementedSemesterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SemesterService_ServiceDesc, srv)
}

func _SemesterService_CreateSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).CreateSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_CreateSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).CreateSemester(ctx, req.(*CreateSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemesterService_GetSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).GetSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_GetSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).GetSemester(ctx, req.(*GetSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemesterService_UpdateSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).UpdateSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_UpdateSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).UpdateSemester(ctx, req.(*UpdateSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SemesterService_DeleteSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemesterServiceServer).DeleteSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SemesterService_DeleteSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemesterServiceServer).DeleteSemester(ctx, req.(*DeleteSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SemesterService_ServiceDesc is the grpc.ServiceDesc for SemesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SemesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.SemesterService",
	HandlerType: (*SemesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSemester",
			Handler:    _SemesterService_CreateSemester_Handler,
		},
		{
			MethodName: "GetSemester",
			Handler:    _SemesterService_GetSemester_Handler,
		},
		{
			MethodName: "UpdateSemester",
			Handler:    _SemesterService_UpdateSemester_Handler,
		},
		{
			MethodName: "DeleteSemester",
			Handler:    _SemesterService_DeleteSemester_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	SekolahService_GetSchoolInfo_FullMethodName         = "/sekolah.SekolahService/GetSchoolInfo"
	SekolahService_RegistrasiSekolah_FullMethodName     = "/sekolah.SekolahService/RegistrasiSekolah"
	SekolahService_GetSekolahTabelTenant_FullMethodName = "/sekolah.SekolahService/GetSekolahTabelTenant"
	SekolahService_CreateSekolah_FullMethodName         = "/sekolah.SekolahService/CreateSekolah"
	SekolahService_GetSekolah_FullMethodName            = "/sekolah.SekolahService/GetSekolah"
)

// SekolahServiceClient is the client API for SekolahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SekolahServiceClient interface {
	GetSchoolInfo(ctx context.Context, in *SchoolRequest, opts ...grpc.CallOption) (*SchoolResponse, error)
	RegistrasiSekolah(ctx context.Context, in *TabelSekolahRequest, opts ...grpc.CallOption) (*TabelSekolahResponse, error)
	GetSekolahTabelTenant(ctx context.Context, in *SekolahTabelTenantRequest, opts ...grpc.CallOption) (*SekolahTabelTenantResponse, error)
	// // CRUD for Sekolah
	CreateSekolah(ctx context.Context, in *CreateSekolahRequest, opts ...grpc.CallOption) (*CreateSekolahResponse, error)
	GetSekolah(ctx context.Context, in *GetSekolahRequest, opts ...grpc.CallOption) (*GetSekolahResponse, error)
}

type sekolahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSekolahServiceClient(cc grpc.ClientConnInterface) SekolahServiceClient {
	return &sekolahServiceClient{cc}
}

func (c *sekolahServiceClient) GetSchoolInfo(ctx context.Context, in *SchoolRequest, opts ...grpc.CallOption) (*SchoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchoolResponse)
	err := c.cc.Invoke(ctx, SekolahService_GetSchoolInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) RegistrasiSekolah(ctx context.Context, in *TabelSekolahRequest, opts ...grpc.CallOption) (*TabelSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TabelSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_RegistrasiSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) GetSekolahTabelTenant(ctx context.Context, in *SekolahTabelTenantRequest, opts ...grpc.CallOption) (*SekolahTabelTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SekolahTabelTenantResponse)
	err := c.cc.Invoke(ctx, SekolahService_GetSekolahTabelTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) CreateSekolah(ctx context.Context, in *CreateSekolahRequest, opts ...grpc.CallOption) (*CreateSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_CreateSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sekolahServiceClient) GetSekolah(ctx context.Context, in *GetSekolahRequest, opts ...grpc.CallOption) (*GetSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSekolahResponse)
	err := c.cc.Invoke(ctx, SekolahService_GetSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SekolahServiceServer is the server API for SekolahService service.
// All implementations must embed UnimplementedSekolahServiceServer
// for forward compatibility.
type SekolahServiceServer interface {
	GetSchoolInfo(context.Context, *SchoolRequest) (*SchoolResponse, error)
	RegistrasiSekolah(context.Context, *TabelSekolahRequest) (*TabelSekolahResponse, error)
	GetSekolahTabelTenant(context.Context, *SekolahTabelTenantRequest) (*SekolahTabelTenantResponse, error)
	// // CRUD for Sekolah
	CreateSekolah(context.Context, *CreateSekolahRequest) (*CreateSekolahResponse, error)
	GetSekolah(context.Context, *GetSekolahRequest) (*GetSekolahResponse, error)
	mustEmbedUnimplementedSekolahServiceServer()
}

// UnimplementedSekolahServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSekolahServiceServer struct{}

func (UnimplementedSekolahServiceServer) GetSchoolInfo(context.Context, *SchoolRequest) (*SchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchoolInfo not implemented")
}
func (UnimplementedSekolahServiceServer) RegistrasiSekolah(context.Context, *TabelSekolahRequest) (*TabelSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrasiSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) GetSekolahTabelTenant(context.Context, *SekolahTabelTenantRequest) (*SekolahTabelTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSekolahTabelTenant not implemented")
}
func (UnimplementedSekolahServiceServer) CreateSekolah(context.Context, *CreateSekolahRequest) (*CreateSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) GetSekolah(context.Context, *GetSekolahRequest) (*GetSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSekolah not implemented")
}
func (UnimplementedSekolahServiceServer) mustEmbedUnimplementedSekolahServiceServer() {}
func (UnimplementedSekolahServiceServer) testEmbeddedByValue()                        {}

// UnsafeSekolahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SekolahServiceServer will
// result in compilation errors.
type UnsafeSekolahServiceServer interface {
	mustEmbedUnimplementedSekolahServiceServer()
}

func RegisterSekolahServiceServer(s grpc.ServiceRegistrar, srv SekolahServiceServer) {
	// If the following call pancis, it indicates UnimplementedSekolahServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SekolahService_ServiceDesc, srv)
}

func _SekolahService_GetSchoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).GetSchoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_GetSchoolInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).GetSchoolInfo(ctx, req.(*SchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_RegistrasiSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TabelSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).RegistrasiSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_RegistrasiSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).RegistrasiSekolah(ctx, req.(*TabelSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_GetSekolahTabelTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SekolahTabelTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).GetSekolahTabelTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_GetSekolahTabelTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).GetSekolahTabelTenant(ctx, req.(*SekolahTabelTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_CreateSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).CreateSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_CreateSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).CreateSekolah(ctx, req.(*CreateSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SekolahService_GetSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SekolahServiceServer).GetSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SekolahService_GetSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SekolahServiceServer).GetSekolah(ctx, req.(*GetSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SekolahService_ServiceDesc is the grpc.ServiceDesc for SekolahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SekolahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.SekolahService",
	HandlerType: (*SekolahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchoolInfo",
			Handler:    _SekolahService_GetSchoolInfo_Handler,
		},
		{
			MethodName: "RegistrasiSekolah",
			Handler:    _SekolahService_RegistrasiSekolah_Handler,
		},
		{
			MethodName: "GetSekolahTabelTenant",
			Handler:    _SekolahService_GetSekolahTabelTenant_Handler,
		},
		{
			MethodName: "CreateSekolah",
			Handler:    _SekolahService_CreateSekolah_Handler,
		},
		{
			MethodName: "GetSekolah",
			Handler:    _SekolahService_GetSekolah_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	SiswaService_CreateSiswa_FullMethodName       = "/sekolah.SiswaService/CreateSiswa"
	SiswaService_CreateBanyakSiswa_FullMethodName = "/sekolah.SiswaService/CreateBanyakSiswa"
	SiswaService_GetSiswa_FullMethodName          = "/sekolah.SiswaService/GetSiswa"
	SiswaService_UpdateSiswa_FullMethodName       = "/sekolah.SiswaService/UpdateSiswa"
	SiswaService_DeleteSiswa_FullMethodName       = "/sekolah.SiswaService/DeleteSiswa"
)

// SiswaServiceClient is the client API for SiswaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// SISWA SERVICE
type SiswaServiceClient interface {
	// CRUD for Siswa
	CreateSiswa(ctx context.Context, in *CreateSiswaRequest, opts ...grpc.CallOption) (*CreateSiswaResponse, error)
	CreateBanyakSiswa(ctx context.Context, in *CreateBanyakSiswaRequest, opts ...grpc.CallOption) (*CreateBanyakSiswaResponse, error)
	GetSiswa(ctx context.Context, in *GetSiswaRequest, opts ...grpc.CallOption) (*GetSiswaResponse, error)
	UpdateSiswa(ctx context.Context, in *UpdateSiswaRequest, opts ...grpc.CallOption) (*UpdateSiswaResponse, error)
	DeleteSiswa(ctx context.Context, in *DeleteSiswaRequest, opts ...grpc.CallOption) (*DeleteSiswaResponse, error)
}

type siswaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiswaServiceClient(cc grpc.ClientConnInterface) SiswaServiceClient {
	return &siswaServiceClient{cc}
}

func (c *siswaServiceClient) CreateSiswa(ctx context.Context, in *CreateSiswaRequest, opts ...grpc.CallOption) (*CreateSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_CreateSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) CreateBanyakSiswa(ctx context.Context, in *CreateBanyakSiswaRequest, opts ...grpc.CallOption) (*CreateBanyakSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_CreateBanyakSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) GetSiswa(ctx context.Context, in *GetSiswaRequest, opts ...grpc.CallOption) (*GetSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_GetSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) UpdateSiswa(ctx context.Context, in *UpdateSiswaRequest, opts ...grpc.CallOption) (*UpdateSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_UpdateSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siswaServiceClient) DeleteSiswa(ctx context.Context, in *DeleteSiswaRequest, opts ...grpc.CallOption) (*DeleteSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSiswaResponse)
	err := c.cc.Invoke(ctx, SiswaService_DeleteSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiswaServiceServer is the server API for SiswaService service.
// All implementations must embed UnimplementedSiswaServiceServer
// for forward compatibility.
//
// =======================================
// SISWA SERVICE
type SiswaServiceServer interface {
	// CRUD for Siswa
	CreateSiswa(context.Context, *CreateSiswaRequest) (*CreateSiswaResponse, error)
	CreateBanyakSiswa(context.Context, *CreateBanyakSiswaRequest) (*CreateBanyakSiswaResponse, error)
	GetSiswa(context.Context, *GetSiswaRequest) (*GetSiswaResponse, error)
	UpdateSiswa(context.Context, *UpdateSiswaRequest) (*UpdateSiswaResponse, error)
	DeleteSiswa(context.Context, *DeleteSiswaRequest) (*DeleteSiswaResponse, error)
	mustEmbedUnimplementedSiswaServiceServer()
}

// UnimplementedSiswaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSiswaServiceServer struct{}

func (UnimplementedSiswaServiceServer) CreateSiswa(context.Context, *CreateSiswaRequest) (*CreateSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) CreateBanyakSiswa(context.Context, *CreateBanyakSiswaRequest) (*CreateBanyakSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) GetSiswa(context.Context, *GetSiswaRequest) (*GetSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) UpdateSiswa(context.Context, *UpdateSiswaRequest) (*UpdateSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) DeleteSiswa(context.Context, *DeleteSiswaRequest) (*DeleteSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSiswa not implemented")
}
func (UnimplementedSiswaServiceServer) mustEmbedUnimplementedSiswaServiceServer() {}
func (UnimplementedSiswaServiceServer) testEmbeddedByValue()                      {}

// UnsafeSiswaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiswaServiceServer will
// result in compilation errors.
type UnsafeSiswaServiceServer interface {
	mustEmbedUnimplementedSiswaServiceServer()
}

func RegisterSiswaServiceServer(s grpc.ServiceRegistrar, srv SiswaServiceServer) {
	// If the following call pancis, it indicates UnimplementedSiswaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SiswaService_ServiceDesc, srv)
}

func _SiswaService_CreateSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).CreateSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_CreateSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).CreateSiswa(ctx, req.(*CreateSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_CreateBanyakSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).CreateBanyakSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_CreateBanyakSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).CreateBanyakSiswa(ctx, req.(*CreateBanyakSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_GetSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).GetSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_GetSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).GetSiswa(ctx, req.(*GetSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_UpdateSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).UpdateSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_UpdateSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).UpdateSiswa(ctx, req.(*UpdateSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiswaService_DeleteSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiswaServiceServer).DeleteSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiswaService_DeleteSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiswaServiceServer).DeleteSiswa(ctx, req.(*DeleteSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiswaService_ServiceDesc is the grpc.ServiceDesc for SiswaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiswaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.SiswaService",
	HandlerType: (*SiswaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSiswa",
			Handler:    _SiswaService_CreateSiswa_Handler,
		},
		{
			MethodName: "CreateBanyakSiswa",
			Handler:    _SiswaService_CreateBanyakSiswa_Handler,
		},
		{
			MethodName: "GetSiswa",
			Handler:    _SiswaService_GetSiswa_Handler,
		},
		{
			MethodName: "UpdateSiswa",
			Handler:    _SiswaService_UpdateSiswa_Handler,
		},
		{
			MethodName: "DeleteSiswa",
			Handler:    _SiswaService_DeleteSiswa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	UploadDataSekolahService_UploadDataSekolahWithMultipart_FullMethodName  = "/sekolah.UploadDataSekolahService/UploadDataSekolahWithMultipart"
	UploadDataSekolahService_UploadDataSekolahWithBase64_FullMethodName     = "/sekolah.UploadDataSekolahService/UploadDataSekolahWithBase64"
	UploadDataSekolahService_UploadDataSekolahWithStreamGrpc_FullMethodName = "/sekolah.UploadDataSekolahService/UploadDataSekolahWithStreamGrpc"
)

// UploadDataSekolahServiceClient is the client API for UploadDataSekolahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// UPLOAD SERVICE
type UploadDataSekolahServiceClient interface {
	UploadDataSekolahWithMultipart(ctx context.Context, in *UploadDataSekolahMultipartRequest, opts ...grpc.CallOption) (*UploadDataSekolahMultipartResponse, error)
	UploadDataSekolahWithBase64(ctx context.Context, in *UploadDataSekolahBase64Request, opts ...grpc.CallOption) (*UploadDataSekolahBase64Response, error)
	UploadDataSekolahWithStreamGrpc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadDataSekolahWithStreamGrpcRequest, UploadDataSekolahWithStreamGrpcResponse], error)
}

type uploadDataSekolahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadDataSekolahServiceClient(cc grpc.ClientConnInterface) UploadDataSekolahServiceClient {
	return &uploadDataSekolahServiceClient{cc}
}

func (c *uploadDataSekolahServiceClient) UploadDataSekolahWithMultipart(ctx context.Context, in *UploadDataSekolahMultipartRequest, opts ...grpc.CallOption) (*UploadDataSekolahMultipartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDataSekolahMultipartResponse)
	err := c.cc.Invoke(ctx, UploadDataSekolahService_UploadDataSekolahWithMultipart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadDataSekolahServiceClient) UploadDataSekolahWithBase64(ctx context.Context, in *UploadDataSekolahBase64Request, opts ...grpc.CallOption) (*UploadDataSekolahBase64Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDataSekolahBase64Response)
	err := c.cc.Invoke(ctx, UploadDataSekolahService_UploadDataSekolahWithBase64_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadDataSekolahServiceClient) UploadDataSekolahWithStreamGrpc(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadDataSekolahWithStreamGrpcRequest, UploadDataSekolahWithStreamGrpcResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UploadDataSekolahService_ServiceDesc.Streams[0], UploadDataSekolahService_UploadDataSekolahWithStreamGrpc_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadDataSekolahWithStreamGrpcRequest, UploadDataSekolahWithStreamGrpcResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadDataSekolahService_UploadDataSekolahWithStreamGrpcClient = grpc.ClientStreamingClient[UploadDataSekolahWithStreamGrpcRequest, UploadDataSekolahWithStreamGrpcResponse]

// UploadDataSekolahServiceServer is the server API for UploadDataSekolahService service.
// All implementations must embed UnimplementedUploadDataSekolahServiceServer
// for forward compatibility.
//
// =======================================
// UPLOAD SERVICE
type UploadDataSekolahServiceServer interface {
	UploadDataSekolahWithMultipart(context.Context, *UploadDataSekolahMultipartRequest) (*UploadDataSekolahMultipartResponse, error)
	UploadDataSekolahWithBase64(context.Context, *UploadDataSekolahBase64Request) (*UploadDataSekolahBase64Response, error)
	UploadDataSekolahWithStreamGrpc(grpc.ClientStreamingServer[UploadDataSekolahWithStreamGrpcRequest, UploadDataSekolahWithStreamGrpcResponse]) error
	mustEmbedUnimplementedUploadDataSekolahServiceServer()
}

// UnimplementedUploadDataSekolahServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploadDataSekolahServiceServer struct{}

func (UnimplementedUploadDataSekolahServiceServer) UploadDataSekolahWithMultipart(context.Context, *UploadDataSekolahMultipartRequest) (*UploadDataSekolahMultipartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDataSekolahWithMultipart not implemented")
}
func (UnimplementedUploadDataSekolahServiceServer) UploadDataSekolahWithBase64(context.Context, *UploadDataSekolahBase64Request) (*UploadDataSekolahBase64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDataSekolahWithBase64 not implemented")
}
func (UnimplementedUploadDataSekolahServiceServer) UploadDataSekolahWithStreamGrpc(grpc.ClientStreamingServer[UploadDataSekolahWithStreamGrpcRequest, UploadDataSekolahWithStreamGrpcResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadDataSekolahWithStreamGrpc not implemented")
}
func (UnimplementedUploadDataSekolahServiceServer) mustEmbedUnimplementedUploadDataSekolahServiceServer() {
}
func (UnimplementedUploadDataSekolahServiceServer) testEmbeddedByValue() {}

// UnsafeUploadDataSekolahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadDataSekolahServiceServer will
// result in compilation errors.
type UnsafeUploadDataSekolahServiceServer interface {
	mustEmbedUnimplementedUploadDataSekolahServiceServer()
}

func RegisterUploadDataSekolahServiceServer(s grpc.ServiceRegistrar, srv UploadDataSekolahServiceServer) {
	// If the following call pancis, it indicates UnimplementedUploadDataSekolahServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploadDataSekolahService_ServiceDesc, srv)
}

func _UploadDataSekolahService_UploadDataSekolahWithMultipart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDataSekolahMultipartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadDataSekolahServiceServer).UploadDataSekolahWithMultipart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadDataSekolahService_UploadDataSekolahWithMultipart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadDataSekolahServiceServer).UploadDataSekolahWithMultipart(ctx, req.(*UploadDataSekolahMultipartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadDataSekolahService_UploadDataSekolahWithBase64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDataSekolahBase64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadDataSekolahServiceServer).UploadDataSekolahWithBase64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadDataSekolahService_UploadDataSekolahWithBase64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadDataSekolahServiceServer).UploadDataSekolahWithBase64(ctx, req.(*UploadDataSekolahBase64Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadDataSekolahService_UploadDataSekolahWithStreamGrpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadDataSekolahServiceServer).UploadDataSekolahWithStreamGrpc(&grpc.GenericServerStream[UploadDataSekolahWithStreamGrpcRequest, UploadDataSekolahWithStreamGrpcResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadDataSekolahService_UploadDataSekolahWithStreamGrpcServer = grpc.ClientStreamingServer[UploadDataSekolahWithStreamGrpcRequest, UploadDataSekolahWithStreamGrpcResponse]

// UploadDataSekolahService_ServiceDesc is the grpc.ServiceDesc for UploadDataSekolahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadDataSekolahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.UploadDataSekolahService",
	HandlerType: (*UploadDataSekolahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadDataSekolahWithMultipart",
			Handler:    _UploadDataSekolahService_UploadDataSekolahWithMultipart_Handler,
		},
		{
			MethodName: "UploadDataSekolahWithBase64",
			Handler:    _UploadDataSekolahService_UploadDataSekolahWithBase64_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadDataSekolahWithStreamGrpc",
			Handler:       _UploadDataSekolahService_UploadDataSekolahWithStreamGrpc_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sekolah.proto",
}

const (
	MapelService_CreateMapel_FullMethodName       = "/sekolah.MapelService/CreateMapel"
	MapelService_CreateBanyakMapel_FullMethodName = "/sekolah.MapelService/CreateBanyakMapel"
	MapelService_GetMapel_FullMethodName          = "/sekolah.MapelService/GetMapel"
	MapelService_UpdateMapel_FullMethodName       = "/sekolah.MapelService/UpdateMapel"
	MapelService_DeleteMapel_FullMethodName       = "/sekolah.MapelService/DeleteMapel"
)

// MapelServiceClient is the client API for MapelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// MATA PELAJARAN SERVICE
type MapelServiceClient interface {
	// CRUD for Mapel
	CreateMapel(ctx context.Context, in *CreateMapelRequest, opts ...grpc.CallOption) (*CreateMapelResponse, error)
	CreateBanyakMapel(ctx context.Context, in *CreateBanyakMapelRequest, opts ...grpc.CallOption) (*CreateBanyakMapelResponse, error)
	GetMapel(ctx context.Context, in *GetMapelRequest, opts ...grpc.CallOption) (*GetMapelResponse, error)
	UpdateMapel(ctx context.Context, in *UpdateMapelRequest, opts ...grpc.CallOption) (*UpdateMapelResponse, error)
	DeleteMapel(ctx context.Context, in *DeleteMapelRequest, opts ...grpc.CallOption) (*DeleteMapelResponse, error)
}

type mapelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapelServiceClient(cc grpc.ClientConnInterface) MapelServiceClient {
	return &mapelServiceClient{cc}
}

func (c *mapelServiceClient) CreateMapel(ctx context.Context, in *CreateMapelRequest, opts ...grpc.CallOption) (*CreateMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMapelResponse)
	err := c.cc.Invoke(ctx, MapelService_CreateMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapelServiceClient) CreateBanyakMapel(ctx context.Context, in *CreateBanyakMapelRequest, opts ...grpc.CallOption) (*CreateBanyakMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakMapelResponse)
	err := c.cc.Invoke(ctx, MapelService_CreateBanyakMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapelServiceClient) GetMapel(ctx context.Context, in *GetMapelRequest, opts ...grpc.CallOption) (*GetMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMapelResponse)
	err := c.cc.Invoke(ctx, MapelService_GetMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapelServiceClient) UpdateMapel(ctx context.Context, in *UpdateMapelRequest, opts ...grpc.CallOption) (*UpdateMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMapelResponse)
	err := c.cc.Invoke(ctx, MapelService_UpdateMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapelServiceClient) DeleteMapel(ctx context.Context, in *DeleteMapelRequest, opts ...grpc.CallOption) (*DeleteMapelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMapelResponse)
	err := c.cc.Invoke(ctx, MapelService_DeleteMapel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapelServiceServer is the server API for MapelService service.
// All implementations must embed UnimplementedMapelServiceServer
// for forward compatibility.
//
// =======================================
// MATA PELAJARAN SERVICE
type MapelServiceServer interface {
	// CRUD for Mapel
	CreateMapel(context.Context, *CreateMapelRequest) (*CreateMapelResponse, error)
	CreateBanyakMapel(context.Context, *CreateBanyakMapelRequest) (*CreateBanyakMapelResponse, error)
	GetMapel(context.Context, *GetMapelRequest) (*GetMapelResponse, error)
	UpdateMapel(context.Context, *UpdateMapelRequest) (*UpdateMapelResponse, error)
	DeleteMapel(context.Context, *DeleteMapelRequest) (*DeleteMapelResponse, error)
	mustEmbedUnimplementedMapelServiceServer()
}

// UnimplementedMapelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMapelServiceServer struct{}

func (UnimplementedMapelServiceServer) CreateMapel(context.Context, *CreateMapelRequest) (*CreateMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapel not implemented")
}
func (UnimplementedMapelServiceServer) CreateBanyakMapel(context.Context, *CreateBanyakMapelRequest) (*CreateBanyakMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakMapel not implemented")
}
func (UnimplementedMapelServiceServer) GetMapel(context.Context, *GetMapelRequest) (*GetMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapel not implemented")
}
func (UnimplementedMapelServiceServer) UpdateMapel(context.Context, *UpdateMapelRequest) (*UpdateMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapel not implemented")
}
func (UnimplementedMapelServiceServer) DeleteMapel(context.Context, *DeleteMapelRequest) (*DeleteMapelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapel not implemented")
}
func (UnimplementedMapelServiceServer) mustEmbedUnimplementedMapelServiceServer() {}
func (UnimplementedMapelServiceServer) testEmbeddedByValue()                      {}

// UnsafeMapelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapelServiceServer will
// result in compilation errors.
type UnsafeMapelServiceServer interface {
	mustEmbedUnimplementedMapelServiceServer()
}

func RegisterMapelServiceServer(s grpc.ServiceRegistrar, srv MapelServiceServer) {
	// If the following call pancis, it indicates UnimplementedMapelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MapelService_ServiceDesc, srv)
}

func _MapelService_CreateMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapelServiceServer).CreateMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapelService_CreateMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapelServiceServer).CreateMapel(ctx, req.(*CreateMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapelService_CreateBanyakMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapelServiceServer).CreateBanyakMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapelService_CreateBanyakMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapelServiceServer).CreateBanyakMapel(ctx, req.(*CreateBanyakMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapelService_GetMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapelServiceServer).GetMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapelService_GetMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapelServiceServer).GetMapel(ctx, req.(*GetMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapelService_UpdateMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapelServiceServer).UpdateMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapelService_UpdateMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapelServiceServer).UpdateMapel(ctx, req.(*UpdateMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapelService_DeleteMapel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMapelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapelServiceServer).DeleteMapel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapelService_DeleteMapel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapelServiceServer).DeleteMapel(ctx, req.(*DeleteMapelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapelService_ServiceDesc is the grpc.ServiceDesc for MapelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.MapelService",
	HandlerType: (*MapelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMapel",
			Handler:    _MapelService_CreateMapel_Handler,
		},
		{
			MethodName: "CreateBanyakMapel",
			Handler:    _MapelService_CreateBanyakMapel_Handler,
		},
		{
			MethodName: "GetMapel",
			Handler:    _MapelService_GetMapel_Handler,
		},
		{
			MethodName: "UpdateMapel",
			Handler:    _MapelService_UpdateMapel_Handler,
		},
		{
			MethodName: "DeleteMapel",
			Handler:    _MapelService_DeleteMapel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	NilaiAkhirService_CreateNilaiAkhir_FullMethodName = "/sekolah.NilaiAkhirService/CreateNilaiAkhir"
	NilaiAkhirService_GetNilaiAkhir_FullMethodName    = "/sekolah.NilaiAkhirService/GetNilaiAkhir"
	NilaiAkhirService_UpdateNilaiAkhir_FullMethodName = "/sekolah.NilaiAkhirService/UpdateNilaiAkhir"
	NilaiAkhirService_DeleteNilaiAkhir_FullMethodName = "/sekolah.NilaiAkhirService/DeleteNilaiAkhir"
)

// NilaiAkhirServiceClient is the client API for NilaiAkhirService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SERVICE NILAI AKHIR
type NilaiAkhirServiceClient interface {
	// Nilai Akhir
	CreateNilaiAkhir(ctx context.Context, in *CreateNilaiAkhirRequest, opts ...grpc.CallOption) (*CreateNilaiAkhirResponse, error)
	GetNilaiAkhir(ctx context.Context, in *GetNilaiAkhirRequest, opts ...grpc.CallOption) (*GetNilaiAkhirResponse, error)
	UpdateNilaiAkhir(ctx context.Context, in *UpdateNilaiAkhirRequest, opts ...grpc.CallOption) (*UpdateNilaiAkhirResponse, error)
	DeleteNilaiAkhir(ctx context.Context, in *DeleteNilaiAkhirRequest, opts ...grpc.CallOption) (*DeleteNilaiAkhirResponse, error)
}

type nilaiAkhirServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNilaiAkhirServiceClient(cc grpc.ClientConnInterface) NilaiAkhirServiceClient {
	return &nilaiAkhirServiceClient{cc}
}

func (c *nilaiAkhirServiceClient) CreateNilaiAkhir(ctx context.Context, in *CreateNilaiAkhirRequest, opts ...grpc.CallOption) (*CreateNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_CreateNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilaiAkhirServiceClient) GetNilaiAkhir(ctx context.Context, in *GetNilaiAkhirRequest, opts ...grpc.CallOption) (*GetNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_GetNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilaiAkhirServiceClient) UpdateNilaiAkhir(ctx context.Context, in *UpdateNilaiAkhirRequest, opts ...grpc.CallOption) (*UpdateNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_UpdateNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilaiAkhirServiceClient) DeleteNilaiAkhir(ctx context.Context, in *DeleteNilaiAkhirRequest, opts ...grpc.CallOption) (*DeleteNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, NilaiAkhirService_DeleteNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NilaiAkhirServiceServer is the server API for NilaiAkhirService service.
// All implementations must embed UnimplementedNilaiAkhirServiceServer
// for forward compatibility.
//
// SERVICE NILAI AKHIR
type NilaiAkhirServiceServer interface {
	// Nilai Akhir
	CreateNilaiAkhir(context.Context, *CreateNilaiAkhirRequest) (*CreateNilaiAkhirResponse, error)
	GetNilaiAkhir(context.Context, *GetNilaiAkhirRequest) (*GetNilaiAkhirResponse, error)
	UpdateNilaiAkhir(context.Context, *UpdateNilaiAkhirRequest) (*UpdateNilaiAkhirResponse, error)
	DeleteNilaiAkhir(context.Context, *DeleteNilaiAkhirRequest) (*DeleteNilaiAkhirResponse, error)
	mustEmbedUnimplementedNilaiAkhirServiceServer()
}

// UnimplementedNilaiAkhirServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNilaiAkhirServiceServer struct{}

func (UnimplementedNilaiAkhirServiceServer) CreateNilaiAkhir(context.Context, *CreateNilaiAkhirRequest) (*CreateNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) GetNilaiAkhir(context.Context, *GetNilaiAkhirRequest) (*GetNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) UpdateNilaiAkhir(context.Context, *UpdateNilaiAkhirRequest) (*UpdateNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) DeleteNilaiAkhir(context.Context, *DeleteNilaiAkhirRequest) (*DeleteNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNilaiAkhir not implemented")
}
func (UnimplementedNilaiAkhirServiceServer) mustEmbedUnimplementedNilaiAkhirServiceServer() {}
func (UnimplementedNilaiAkhirServiceServer) testEmbeddedByValue()                           {}

// UnsafeNilaiAkhirServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NilaiAkhirServiceServer will
// result in compilation errors.
type UnsafeNilaiAkhirServiceServer interface {
	mustEmbedUnimplementedNilaiAkhirServiceServer()
}

func RegisterNilaiAkhirServiceServer(s grpc.ServiceRegistrar, srv NilaiAkhirServiceServer) {
	// If the following call pancis, it indicates UnimplementedNilaiAkhirServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NilaiAkhirService_ServiceDesc, srv)
}

func _NilaiAkhirService_CreateNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).CreateNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_CreateNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).CreateNilaiAkhir(ctx, req.(*CreateNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilaiAkhirService_GetNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).GetNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_GetNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).GetNilaiAkhir(ctx, req.(*GetNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilaiAkhirService_UpdateNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).UpdateNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_UpdateNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).UpdateNilaiAkhir(ctx, req.(*UpdateNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilaiAkhirService_DeleteNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilaiAkhirServiceServer).DeleteNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NilaiAkhirService_DeleteNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilaiAkhirServiceServer).DeleteNilaiAkhir(ctx, req.(*DeleteNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NilaiAkhirService_ServiceDesc is the grpc.ServiceDesc for NilaiAkhirService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NilaiAkhirService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.NilaiAkhirService",
	HandlerType: (*NilaiAkhirServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNilaiAkhir",
			Handler:    _NilaiAkhirService_CreateNilaiAkhir_Handler,
		},
		{
			MethodName: "GetNilaiAkhir",
			Handler:    _NilaiAkhirService_GetNilaiAkhir_Handler,
		},
		{
			MethodName: "UpdateNilaiAkhir",
			Handler:    _NilaiAkhirService_UpdateNilaiAkhir_Handler,
		},
		{
			MethodName: "DeleteNilaiAkhir",
			Handler:    _NilaiAkhirService_DeleteNilaiAkhir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	KelasService_CreateKelas_FullMethodName       = "/sekolah.KelasService/CreateKelas"
	KelasService_CreateBanyakKelas_FullMethodName = "/sekolah.KelasService/CreateBanyakKelas"
	KelasService_GetKelas_FullMethodName          = "/sekolah.KelasService/GetKelas"
	KelasService_UpdateKelas_FullMethodName       = "/sekolah.KelasService/UpdateKelas"
	KelasService_DeleteKelas_FullMethodName       = "/sekolah.KelasService/DeleteKelas"
)

// KelasServiceClient is the client API for KelasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// KELAS SERVICE
type KelasServiceClient interface {
	// Kelas
	CreateKelas(ctx context.Context, in *CreateKelasRequest, opts ...grpc.CallOption) (*CreateKelasResponse, error)
	CreateBanyakKelas(ctx context.Context, in *CreateBanyakKelasRequest, opts ...grpc.CallOption) (*CreateBanyakKelasResponse, error)
	GetKelas(ctx context.Context, in *GetKelasRequest, opts ...grpc.CallOption) (*GetKelasResponse, error)
	UpdateKelas(ctx context.Context, in *UpdateKelasRequest, opts ...grpc.CallOption) (*UpdateKelasResponse, error)
	DeleteKelas(ctx context.Context, in *DeleteKelasRequest, opts ...grpc.CallOption) (*DeleteKelasResponse, error)
}

type kelasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKelasServiceClient(cc grpc.ClientConnInterface) KelasServiceClient {
	return &kelasServiceClient{cc}
}

func (c *kelasServiceClient) CreateKelas(ctx context.Context, in *CreateKelasRequest, opts ...grpc.CallOption) (*CreateKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_CreateKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) CreateBanyakKelas(ctx context.Context, in *CreateBanyakKelasRequest, opts ...grpc.CallOption) (*CreateBanyakKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_CreateBanyakKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) GetKelas(ctx context.Context, in *GetKelasRequest, opts ...grpc.CallOption) (*GetKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_GetKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) UpdateKelas(ctx context.Context, in *UpdateKelasRequest, opts ...grpc.CallOption) (*UpdateKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_UpdateKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kelasServiceClient) DeleteKelas(ctx context.Context, in *DeleteKelasRequest, opts ...grpc.CallOption) (*DeleteKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKelasResponse)
	err := c.cc.Invoke(ctx, KelasService_DeleteKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KelasServiceServer is the server API for KelasService service.
// All implementations must embed UnimplementedKelasServiceServer
// for forward compatibility.
//
// =======================================
// KELAS SERVICE
type KelasServiceServer interface {
	// Kelas
	CreateKelas(context.Context, *CreateKelasRequest) (*CreateKelasResponse, error)
	CreateBanyakKelas(context.Context, *CreateBanyakKelasRequest) (*CreateBanyakKelasResponse, error)
	GetKelas(context.Context, *GetKelasRequest) (*GetKelasResponse, error)
	UpdateKelas(context.Context, *UpdateKelasRequest) (*UpdateKelasResponse, error)
	DeleteKelas(context.Context, *DeleteKelasRequest) (*DeleteKelasResponse, error)
	mustEmbedUnimplementedKelasServiceServer()
}

// UnimplementedKelasServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKelasServiceServer struct{}

func (UnimplementedKelasServiceServer) CreateKelas(context.Context, *CreateKelasRequest) (*CreateKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKelas not implemented")
}
func (UnimplementedKelasServiceServer) CreateBanyakKelas(context.Context, *CreateBanyakKelasRequest) (*CreateBanyakKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakKelas not implemented")
}
func (UnimplementedKelasServiceServer) GetKelas(context.Context, *GetKelasRequest) (*GetKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKelas not implemented")
}
func (UnimplementedKelasServiceServer) UpdateKelas(context.Context, *UpdateKelasRequest) (*UpdateKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKelas not implemented")
}
func (UnimplementedKelasServiceServer) DeleteKelas(context.Context, *DeleteKelasRequest) (*DeleteKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKelas not implemented")
}
func (UnimplementedKelasServiceServer) mustEmbedUnimplementedKelasServiceServer() {}
func (UnimplementedKelasServiceServer) testEmbeddedByValue()                      {}

// UnsafeKelasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KelasServiceServer will
// result in compilation errors.
type UnsafeKelasServiceServer interface {
	mustEmbedUnimplementedKelasServiceServer()
}

func RegisterKelasServiceServer(s grpc.ServiceRegistrar, srv KelasServiceServer) {
	// If the following call pancis, it indicates UnimplementedKelasServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KelasService_ServiceDesc, srv)
}

func _KelasService_CreateKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).CreateKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_CreateKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).CreateKelas(ctx, req.(*CreateKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_CreateBanyakKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).CreateBanyakKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_CreateBanyakKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).CreateBanyakKelas(ctx, req.(*CreateBanyakKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_GetKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).GetKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_GetKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).GetKelas(ctx, req.(*GetKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_UpdateKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).UpdateKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_UpdateKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).UpdateKelas(ctx, req.(*UpdateKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KelasService_DeleteKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelasServiceServer).DeleteKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KelasService_DeleteKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelasServiceServer).DeleteKelas(ctx, req.(*DeleteKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KelasService_ServiceDesc is the grpc.ServiceDesc for KelasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KelasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.KelasService",
	HandlerType: (*KelasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKelas",
			Handler:    _KelasService_CreateKelas_Handler,
		},
		{
			MethodName: "CreateBanyakKelas",
			Handler:    _KelasService_CreateBanyakKelas_Handler,
		},
		{
			MethodName: "GetKelas",
			Handler:    _KelasService_GetKelas_Handler,
		},
		{
			MethodName: "UpdateKelas",
			Handler:    _KelasService_UpdateKelas_Handler,
		},
		{
			MethodName: "DeleteKelas",
			Handler:    _KelasService_DeleteKelas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	AnggotaKelasService_CreateAnggotaKelas_FullMethodName       = "/sekolah.AnggotaKelasService/CreateAnggotaKelas"
	AnggotaKelasService_CreateBanyakAnggotaKelas_FullMethodName = "/sekolah.AnggotaKelasService/CreateBanyakAnggotaKelas"
	AnggotaKelasService_GetAnggotaKelas_FullMethodName          = "/sekolah.AnggotaKelasService/GetAnggotaKelas"
	AnggotaKelasService_UpdateAnggotaKelas_FullMethodName       = "/sekolah.AnggotaKelasService/UpdateAnggotaKelas"
	AnggotaKelasService_DeleteAnggotaKelas_FullMethodName       = "/sekolah.AnggotaKelasService/DeleteAnggotaKelas"
)

// AnggotaKelasServiceClient is the client API for AnggotaKelasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// KELAS SERVICE
type AnggotaKelasServiceClient interface {
	// AnggotaKelas
	CreateAnggotaKelas(ctx context.Context, in *CreateAnggotaKelasRequest, opts ...grpc.CallOption) (*CreateAnggotaKelasResponse, error)
	CreateBanyakAnggotaKelas(ctx context.Context, in *CreateBanyakAnggotaKelasRequest, opts ...grpc.CallOption) (*CreateBanyakAnggotaKelasResponse, error)
	GetAnggotaKelas(ctx context.Context, in *GetAnggotaKelasRequest, opts ...grpc.CallOption) (*GetAnggotaKelasResponse, error)
	UpdateAnggotaKelas(ctx context.Context, in *UpdateAnggotaKelasRequest, opts ...grpc.CallOption) (*UpdateAnggotaKelasResponse, error)
	DeleteAnggotaKelas(ctx context.Context, in *DeleteAnggotaKelasRequest, opts ...grpc.CallOption) (*DeleteAnggotaKelasResponse, error)
}

type anggotaKelasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnggotaKelasServiceClient(cc grpc.ClientConnInterface) AnggotaKelasServiceClient {
	return &anggotaKelasServiceClient{cc}
}

func (c *anggotaKelasServiceClient) CreateAnggotaKelas(ctx context.Context, in *CreateAnggotaKelasRequest, opts ...grpc.CallOption) (*CreateAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_CreateAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) CreateBanyakAnggotaKelas(ctx context.Context, in *CreateBanyakAnggotaKelasRequest, opts ...grpc.CallOption) (*CreateBanyakAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_CreateBanyakAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) GetAnggotaKelas(ctx context.Context, in *GetAnggotaKelasRequest, opts ...grpc.CallOption) (*GetAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_GetAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) UpdateAnggotaKelas(ctx context.Context, in *UpdateAnggotaKelasRequest, opts ...grpc.CallOption) (*UpdateAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_UpdateAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggotaKelasServiceClient) DeleteAnggotaKelas(ctx context.Context, in *DeleteAnggotaKelasRequest, opts ...grpc.CallOption) (*DeleteAnggotaKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnggotaKelasResponse)
	err := c.cc.Invoke(ctx, AnggotaKelasService_DeleteAnggotaKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnggotaKelasServiceServer is the server API for AnggotaKelasService service.
// All implementations must embed UnimplementedAnggotaKelasServiceServer
// for forward compatibility.
//
// =======================================
// KELAS SERVICE
type AnggotaKelasServiceServer interface {
	// AnggotaKelas
	CreateAnggotaKelas(context.Context, *CreateAnggotaKelasRequest) (*CreateAnggotaKelasResponse, error)
	CreateBanyakAnggotaKelas(context.Context, *CreateBanyakAnggotaKelasRequest) (*CreateBanyakAnggotaKelasResponse, error)
	GetAnggotaKelas(context.Context, *GetAnggotaKelasRequest) (*GetAnggotaKelasResponse, error)
	UpdateAnggotaKelas(context.Context, *UpdateAnggotaKelasRequest) (*UpdateAnggotaKelasResponse, error)
	DeleteAnggotaKelas(context.Context, *DeleteAnggotaKelasRequest) (*DeleteAnggotaKelasResponse, error)
	mustEmbedUnimplementedAnggotaKelasServiceServer()
}

// UnimplementedAnggotaKelasServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnggotaKelasServiceServer struct{}

func (UnimplementedAnggotaKelasServiceServer) CreateAnggotaKelas(context.Context, *CreateAnggotaKelasRequest) (*CreateAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) CreateBanyakAnggotaKelas(context.Context, *CreateBanyakAnggotaKelasRequest) (*CreateBanyakAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) GetAnggotaKelas(context.Context, *GetAnggotaKelasRequest) (*GetAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) UpdateAnggotaKelas(context.Context, *UpdateAnggotaKelasRequest) (*UpdateAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) DeleteAnggotaKelas(context.Context, *DeleteAnggotaKelasRequest) (*DeleteAnggotaKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnggotaKelas not implemented")
}
func (UnimplementedAnggotaKelasServiceServer) mustEmbedUnimplementedAnggotaKelasServiceServer() {}
func (UnimplementedAnggotaKelasServiceServer) testEmbeddedByValue()                             {}

// UnsafeAnggotaKelasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnggotaKelasServiceServer will
// result in compilation errors.
type UnsafeAnggotaKelasServiceServer interface {
	mustEmbedUnimplementedAnggotaKelasServiceServer()
}

func RegisterAnggotaKelasServiceServer(s grpc.ServiceRegistrar, srv AnggotaKelasServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnggotaKelasServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnggotaKelasService_ServiceDesc, srv)
}

func _AnggotaKelasService_CreateAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).CreateAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_CreateAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).CreateAnggotaKelas(ctx, req.(*CreateAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_CreateBanyakAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).CreateBanyakAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_CreateBanyakAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).CreateBanyakAnggotaKelas(ctx, req.(*CreateBanyakAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_GetAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).GetAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_GetAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).GetAnggotaKelas(ctx, req.(*GetAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_UpdateAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).UpdateAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_UpdateAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).UpdateAnggotaKelas(ctx, req.(*UpdateAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggotaKelasService_DeleteAnggotaKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnggotaKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggotaKelasServiceServer).DeleteAnggotaKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggotaKelasService_DeleteAnggotaKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggotaKelasServiceServer).DeleteAnggotaKelas(ctx, req.(*DeleteAnggotaKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnggotaKelasService_ServiceDesc is the grpc.ServiceDesc for AnggotaKelasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnggotaKelasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.AnggotaKelasService",
	HandlerType: (*AnggotaKelasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnggotaKelas",
			Handler:    _AnggotaKelasService_CreateAnggotaKelas_Handler,
		},
		{
			MethodName: "CreateBanyakAnggotaKelas",
			Handler:    _AnggotaKelasService_CreateBanyakAnggotaKelas_Handler,
		},
		{
			MethodName: "GetAnggotaKelas",
			Handler:    _AnggotaKelasService_GetAnggotaKelas_Handler,
		},
		{
			MethodName: "UpdateAnggotaKelas",
			Handler:    _AnggotaKelasService_UpdateAnggotaKelas_Handler,
		},
		{
			MethodName: "DeleteAnggotaKelas",
			Handler:    _AnggotaKelasService_DeleteAnggotaKelas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	PTKService_CreatePTK_FullMethodName = "/sekolah.PTKService/CreatePTK"
	PTKService_GetPTK_FullMethodName    = "/sekolah.PTKService/GetPTK"
	PTKService_UpdatePTK_FullMethodName = "/sekolah.PTKService/UpdatePTK"
	PTKService_DeletePTK_FullMethodName = "/sekolah.PTKService/DeletePTK"
)

// PTKServiceClient is the client API for PTKService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
// PTK SERVICE
type PTKServiceClient interface {
	// CRUD for PTK
	CreatePTK(ctx context.Context, in *CreatePTKRequest, opts ...grpc.CallOption) (*CreatePTKResponse, error)
	GetPTK(ctx context.Context, in *GetPTKRequest, opts ...grpc.CallOption) (*GetPTKResponse, error)
	UpdatePTK(ctx context.Context, in *UpdatePTKRequest, opts ...grpc.CallOption) (*UpdatePTKResponse, error)
	DeletePTK(ctx context.Context, in *DeletePTKRequest, opts ...grpc.CallOption) (*DeletePTKResponse, error)
}

type pTKServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPTKServiceClient(cc grpc.ClientConnInterface) PTKServiceClient {
	return &pTKServiceClient{cc}
}

func (c *pTKServiceClient) CreatePTK(ctx context.Context, in *CreatePTKRequest, opts ...grpc.CallOption) (*CreatePTKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePTKResponse)
	err := c.cc.Invoke(ctx, PTKService_CreatePTK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKServiceClient) GetPTK(ctx context.Context, in *GetPTKRequest, opts ...grpc.CallOption) (*GetPTKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPTKResponse)
	err := c.cc.Invoke(ctx, PTKService_GetPTK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKServiceClient) UpdatePTK(ctx context.Context, in *UpdatePTKRequest, opts ...grpc.CallOption) (*UpdatePTKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePTKResponse)
	err := c.cc.Invoke(ctx, PTKService_UpdatePTK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKServiceClient) DeletePTK(ctx context.Context, in *DeletePTKRequest, opts ...grpc.CallOption) (*DeletePTKResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePTKResponse)
	err := c.cc.Invoke(ctx, PTKService_DeletePTK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PTKServiceServer is the server API for PTKService service.
// All implementations must embed UnimplementedPTKServiceServer
// for forward compatibility.
//
// =======================================
// PTK SERVICE
type PTKServiceServer interface {
	// CRUD for PTK
	CreatePTK(context.Context, *CreatePTKRequest) (*CreatePTKResponse, error)
	GetPTK(context.Context, *GetPTKRequest) (*GetPTKResponse, error)
	UpdatePTK(context.Context, *UpdatePTKRequest) (*UpdatePTKResponse, error)
	DeletePTK(context.Context, *DeletePTKRequest) (*DeletePTKResponse, error)
	mustEmbedUnimplementedPTKServiceServer()
}

// UnimplementedPTKServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPTKServiceServer struct{}

func (UnimplementedPTKServiceServer) CreatePTK(context.Context, *CreatePTKRequest) (*CreatePTKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePTK not implemented")
}
func (UnimplementedPTKServiceServer) GetPTK(context.Context, *GetPTKRequest) (*GetPTKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPTK not implemented")
}
func (UnimplementedPTKServiceServer) UpdatePTK(context.Context, *UpdatePTKRequest) (*UpdatePTKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePTK not implemented")
}
func (UnimplementedPTKServiceServer) DeletePTK(context.Context, *DeletePTKRequest) (*DeletePTKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePTK not implemented")
}
func (UnimplementedPTKServiceServer) mustEmbedUnimplementedPTKServiceServer() {}
func (UnimplementedPTKServiceServer) testEmbeddedByValue()                    {}

// UnsafePTKServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PTKServiceServer will
// result in compilation errors.
type UnsafePTKServiceServer interface {
	mustEmbedUnimplementedPTKServiceServer()
}

func RegisterPTKServiceServer(s grpc.ServiceRegistrar, srv PTKServiceServer) {
	// If the following call pancis, it indicates UnimplementedPTKServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PTKService_ServiceDesc, srv)
}

func _PTKService_CreatePTK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePTKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).CreatePTK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_CreatePTK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).CreatePTK(ctx, req.(*CreatePTKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKService_GetPTK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPTKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).GetPTK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_GetPTK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).GetPTK(ctx, req.(*GetPTKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKService_UpdatePTK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePTKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).UpdatePTK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_UpdatePTK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).UpdatePTK(ctx, req.(*UpdatePTKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKService_DeletePTK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePTKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKServiceServer).DeletePTK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKService_DeletePTK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKServiceServer).DeletePTK(ctx, req.(*DeletePTKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PTKService_ServiceDesc is the grpc.ServiceDesc for PTKService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PTKService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.PTKService",
	HandlerType: (*PTKServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePTK",
			Handler:    _PTKService_CreatePTK_Handler,
		},
		{
			MethodName: "GetPTK",
			Handler:    _PTKService_GetPTK_Handler,
		},
		{
			MethodName: "UpdatePTK",
			Handler:    _PTKService_UpdatePTK_Handler,
		},
		{
			MethodName: "DeletePTK",
			Handler:    _PTKService_DeletePTK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	PTKTerdaftarService_CreatePTKTerdaftar_FullMethodName       = "/sekolah.PTKTerdaftarService/CreatePTKTerdaftar"
	PTKTerdaftarService_CreateBanyakPTKTerdaftar_FullMethodName = "/sekolah.PTKTerdaftarService/CreateBanyakPTKTerdaftar"
	PTKTerdaftarService_GetPTKTerdaftar_FullMethodName          = "/sekolah.PTKTerdaftarService/GetPTKTerdaftar"
	PTKTerdaftarService_UpdatePTKTerdaftar_FullMethodName       = "/sekolah.PTKTerdaftarService/UpdatePTKTerdaftar"
	PTKTerdaftarService_DeletePTKTerdaftar_FullMethodName       = "/sekolah.PTKTerdaftarService/DeletePTKTerdaftar"
)

// PTKTerdaftarServiceClient is the client API for PTKTerdaftarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PTKTerdaftarServiceClient interface {
	// CRUD for PTKTerdaftar
	CreatePTKTerdaftar(ctx context.Context, in *CreatePTKTerdaftarRequest, opts ...grpc.CallOption) (*CreatePTKTerdaftarResponse, error)
	CreateBanyakPTKTerdaftar(ctx context.Context, in *CreateBanyakPTKTerdaftarRequest, opts ...grpc.CallOption) (*CreateBanyakPTKTerdaftarResponse, error)
	GetPTKTerdaftar(ctx context.Context, in *GetPTKTerdaftarRequest, opts ...grpc.CallOption) (*GetPTKTerdaftarResponse, error)
	UpdatePTKTerdaftar(ctx context.Context, in *UpdatePTKTerdaftarRequest, opts ...grpc.CallOption) (*UpdatePTKTerdaftarResponse, error)
	DeletePTKTerdaftar(ctx context.Context, in *DeletePTKTerdaftarRequest, opts ...grpc.CallOption) (*DeletePTKTerdaftarResponse, error)
}

type pTKTerdaftarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPTKTerdaftarServiceClient(cc grpc.ClientConnInterface) PTKTerdaftarServiceClient {
	return &pTKTerdaftarServiceClient{cc}
}

func (c *pTKTerdaftarServiceClient) CreatePTKTerdaftar(ctx context.Context, in *CreatePTKTerdaftarRequest, opts ...grpc.CallOption) (*CreatePTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_CreatePTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) CreateBanyakPTKTerdaftar(ctx context.Context, in *CreateBanyakPTKTerdaftarRequest, opts ...grpc.CallOption) (*CreateBanyakPTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakPTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_CreateBanyakPTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) GetPTKTerdaftar(ctx context.Context, in *GetPTKTerdaftarRequest, opts ...grpc.CallOption) (*GetPTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_GetPTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) UpdatePTKTerdaftar(ctx context.Context, in *UpdatePTKTerdaftarRequest, opts ...grpc.CallOption) (*UpdatePTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_UpdatePTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pTKTerdaftarServiceClient) DeletePTKTerdaftar(ctx context.Context, in *DeletePTKTerdaftarRequest, opts ...grpc.CallOption) (*DeletePTKTerdaftarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePTKTerdaftarResponse)
	err := c.cc.Invoke(ctx, PTKTerdaftarService_DeletePTKTerdaftar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PTKTerdaftarServiceServer is the server API for PTKTerdaftarService service.
// All implementations must embed UnimplementedPTKTerdaftarServiceServer
// for forward compatibility.
type PTKTerdaftarServiceServer interface {
	// CRUD for PTKTerdaftar
	CreatePTKTerdaftar(context.Context, *CreatePTKTerdaftarRequest) (*CreatePTKTerdaftarResponse, error)
	CreateBanyakPTKTerdaftar(context.Context, *CreateBanyakPTKTerdaftarRequest) (*CreateBanyakPTKTerdaftarResponse, error)
	GetPTKTerdaftar(context.Context, *GetPTKTerdaftarRequest) (*GetPTKTerdaftarResponse, error)
	UpdatePTKTerdaftar(context.Context, *UpdatePTKTerdaftarRequest) (*UpdatePTKTerdaftarResponse, error)
	DeletePTKTerdaftar(context.Context, *DeletePTKTerdaftarRequest) (*DeletePTKTerdaftarResponse, error)
	mustEmbedUnimplementedPTKTerdaftarServiceServer()
}

// UnimplementedPTKTerdaftarServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPTKTerdaftarServiceServer struct{}

func (UnimplementedPTKTerdaftarServiceServer) CreatePTKTerdaftar(context.Context, *CreatePTKTerdaftarRequest) (*CreatePTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) CreateBanyakPTKTerdaftar(context.Context, *CreateBanyakPTKTerdaftarRequest) (*CreateBanyakPTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakPTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) GetPTKTerdaftar(context.Context, *GetPTKTerdaftarRequest) (*GetPTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) UpdatePTKTerdaftar(context.Context, *UpdatePTKTerdaftarRequest) (*UpdatePTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) DeletePTKTerdaftar(context.Context, *DeletePTKTerdaftarRequest) (*DeletePTKTerdaftarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePTKTerdaftar not implemented")
}
func (UnimplementedPTKTerdaftarServiceServer) mustEmbedUnimplementedPTKTerdaftarServiceServer() {}
func (UnimplementedPTKTerdaftarServiceServer) testEmbeddedByValue()                             {}

// UnsafePTKTerdaftarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PTKTerdaftarServiceServer will
// result in compilation errors.
type UnsafePTKTerdaftarServiceServer interface {
	mustEmbedUnimplementedPTKTerdaftarServiceServer()
}

func RegisterPTKTerdaftarServiceServer(s grpc.ServiceRegistrar, srv PTKTerdaftarServiceServer) {
	// If the following call pancis, it indicates UnimplementedPTKTerdaftarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PTKTerdaftarService_ServiceDesc, srv)
}

func _PTKTerdaftarService_CreatePTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).CreatePTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_CreatePTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).CreatePTKTerdaftar(ctx, req.(*CreatePTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_CreateBanyakPTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakPTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).CreateBanyakPTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_CreateBanyakPTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).CreateBanyakPTKTerdaftar(ctx, req.(*CreateBanyakPTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_GetPTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).GetPTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_GetPTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).GetPTKTerdaftar(ctx, req.(*GetPTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_UpdatePTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).UpdatePTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_UpdatePTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).UpdatePTKTerdaftar(ctx, req.(*UpdatePTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PTKTerdaftarService_DeletePTKTerdaftar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePTKTerdaftarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PTKTerdaftarServiceServer).DeletePTKTerdaftar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PTKTerdaftarService_DeletePTKTerdaftar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PTKTerdaftarServiceServer).DeletePTKTerdaftar(ctx, req.(*DeletePTKTerdaftarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PTKTerdaftarService_ServiceDesc is the grpc.ServiceDesc for PTKTerdaftarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PTKTerdaftarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.PTKTerdaftarService",
	HandlerType: (*PTKTerdaftarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePTKTerdaftar",
			Handler:    _PTKTerdaftarService_CreatePTKTerdaftar_Handler,
		},
		{
			MethodName: "CreateBanyakPTKTerdaftar",
			Handler:    _PTKTerdaftarService_CreateBanyakPTKTerdaftar_Handler,
		},
		{
			MethodName: "GetPTKTerdaftar",
			Handler:    _PTKTerdaftarService_GetPTKTerdaftar_Handler,
		},
		{
			MethodName: "UpdatePTKTerdaftar",
			Handler:    _PTKTerdaftarService_UpdatePTKTerdaftar_Handler,
		},
		{
			MethodName: "DeletePTKTerdaftar",
			Handler:    _PTKTerdaftarService_DeletePTKTerdaftar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}

const (
	IjazahService_CreateIjazah_FullMethodName       = "/sekolah.IjazahService/CreateIjazah"
	IjazahService_CreateBanyakIjazah_FullMethodName = "/sekolah.IjazahService/CreateBanyakIjazah"
	IjazahService_GetIjazah_FullMethodName          = "/sekolah.IjazahService/GetIjazah"
	IjazahService_UpdateIjazah_FullMethodName       = "/sekolah.IjazahService/UpdateIjazah"
	IjazahService_DeleteIjazah_FullMethodName       = "/sekolah.IjazahService/DeleteIjazah"
)

// IjazahServiceClient is the client API for IjazahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IJAZAH SERVICE
type IjazahServiceClient interface {
	// Ijazah
	CreateIjazah(ctx context.Context, in *CreateIjazahRequest, opts ...grpc.CallOption) (*CreateIjazahResponse, error)
	CreateBanyakIjazah(ctx context.Context, in *CreateBanyakIjazahRequest, opts ...grpc.CallOption) (*CreateBanyakIjazahResponse, error)
	GetIjazah(ctx context.Context, in *GetIjazahRequest, opts ...grpc.CallOption) (*GetIjazahResponse, error)
	UpdateIjazah(ctx context.Context, in *UpdateIjazahRequest, opts ...grpc.CallOption) (*UpdateIjazahResponse, error)
	DeleteIjazah(ctx context.Context, in *DeleteIjazahRequest, opts ...grpc.CallOption) (*DeleteIjazahResponse, error)
}

type ijazahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIjazahServiceClient(cc grpc.ClientConnInterface) IjazahServiceClient {
	return &ijazahServiceClient{cc}
}

func (c *ijazahServiceClient) CreateIjazah(ctx context.Context, in *CreateIjazahRequest, opts ...grpc.CallOption) (*CreateIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_CreateIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) CreateBanyakIjazah(ctx context.Context, in *CreateBanyakIjazahRequest, opts ...grpc.CallOption) (*CreateBanyakIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBanyakIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_CreateBanyakIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) GetIjazah(ctx context.Context, in *GetIjazahRequest, opts ...grpc.CallOption) (*GetIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_GetIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) UpdateIjazah(ctx context.Context, in *UpdateIjazahRequest, opts ...grpc.CallOption) (*UpdateIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_UpdateIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ijazahServiceClient) DeleteIjazah(ctx context.Context, in *DeleteIjazahRequest, opts ...grpc.CallOption) (*DeleteIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIjazahResponse)
	err := c.cc.Invoke(ctx, IjazahService_DeleteIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IjazahServiceServer is the server API for IjazahService service.
// All implementations must embed UnimplementedIjazahServiceServer
// for forward compatibility.
//
// IJAZAH SERVICE
type IjazahServiceServer interface {
	// Ijazah
	CreateIjazah(context.Context, *CreateIjazahRequest) (*CreateIjazahResponse, error)
	CreateBanyakIjazah(context.Context, *CreateBanyakIjazahRequest) (*CreateBanyakIjazahResponse, error)
	GetIjazah(context.Context, *GetIjazahRequest) (*GetIjazahResponse, error)
	UpdateIjazah(context.Context, *UpdateIjazahRequest) (*UpdateIjazahResponse, error)
	DeleteIjazah(context.Context, *DeleteIjazahRequest) (*DeleteIjazahResponse, error)
	mustEmbedUnimplementedIjazahServiceServer()
}

// UnimplementedIjazahServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIjazahServiceServer struct{}

func (UnimplementedIjazahServiceServer) CreateIjazah(context.Context, *CreateIjazahRequest) (*CreateIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) CreateBanyakIjazah(context.Context, *CreateBanyakIjazahRequest) (*CreateBanyakIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanyakIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) GetIjazah(context.Context, *GetIjazahRequest) (*GetIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) UpdateIjazah(context.Context, *UpdateIjazahRequest) (*UpdateIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) DeleteIjazah(context.Context, *DeleteIjazahRequest) (*DeleteIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIjazah not implemented")
}
func (UnimplementedIjazahServiceServer) mustEmbedUnimplementedIjazahServiceServer() {}
func (UnimplementedIjazahServiceServer) testEmbeddedByValue()                       {}

// UnsafeIjazahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IjazahServiceServer will
// result in compilation errors.
type UnsafeIjazahServiceServer interface {
	mustEmbedUnimplementedIjazahServiceServer()
}

func RegisterIjazahServiceServer(s grpc.ServiceRegistrar, srv IjazahServiceServer) {
	// If the following call pancis, it indicates UnimplementedIjazahServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IjazahService_ServiceDesc, srv)
}

func _IjazahService_CreateIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).CreateIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_CreateIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).CreateIjazah(ctx, req.(*CreateIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_CreateBanyakIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanyakIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).CreateBanyakIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_CreateBanyakIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).CreateBanyakIjazah(ctx, req.(*CreateBanyakIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_GetIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).GetIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_GetIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).GetIjazah(ctx, req.(*GetIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_UpdateIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).UpdateIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_UpdateIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).UpdateIjazah(ctx, req.(*UpdateIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IjazahService_DeleteIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IjazahServiceServer).DeleteIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IjazahService_DeleteIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IjazahServiceServer).DeleteIjazah(ctx, req.(*DeleteIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IjazahService_ServiceDesc is the grpc.ServiceDesc for IjazahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IjazahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah.IjazahService",
	HandlerType: (*IjazahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIjazah",
			Handler:    _IjazahService_CreateIjazah_Handler,
		},
		{
			MethodName: "CreateBanyakIjazah",
			Handler:    _IjazahService_CreateBanyakIjazah_Handler,
		},
		{
			MethodName: "GetIjazah",
			Handler:    _IjazahService_GetIjazah_Handler,
		},
		{
			MethodName: "UpdateIjazah",
			Handler:    _IjazahService_UpdateIjazah_Handler,
		},
		{
			MethodName: "DeleteIjazah",
			Handler:    _IjazahService_DeleteIjazah_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekolah.proto",
}
