// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/sekolah.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchoolService_GetSchoolInfo_FullMethodName         = "/sekolah_service.SchoolService/GetSchoolInfo"
	SchoolService_RegistrasiSekolah_FullMethodName     = "/sekolah_service.SchoolService/RegistrasiSekolah"
	SchoolService_GetSekolahTabelTenant_FullMethodName = "/sekolah_service.SchoolService/GetSekolahTabelTenant"
	SchoolService_CreateSekolah_FullMethodName         = "/sekolah_service.SchoolService/CreateSekolah"
	SchoolService_GetSekolah_FullMethodName            = "/sekolah_service.SchoolService/GetSekolah"
	SchoolService_CreateSiswa_FullMethodName           = "/sekolah_service.SchoolService/CreateSiswa"
	SchoolService_GetSiswa_FullMethodName              = "/sekolah_service.SchoolService/GetSiswa"
	SchoolService_UpdateSiswa_FullMethodName           = "/sekolah_service.SchoolService/UpdateSiswa"
	SchoolService_DeleteSiswa_FullMethodName           = "/sekolah_service.SchoolService/DeleteSiswa"
	SchoolService_CreateGuru_FullMethodName            = "/sekolah_service.SchoolService/CreateGuru"
	SchoolService_GetGuru_FullMethodName               = "/sekolah_service.SchoolService/GetGuru"
	SchoolService_UpdateGuru_FullMethodName            = "/sekolah_service.SchoolService/UpdateGuru"
	SchoolService_DeleteGuru_FullMethodName            = "/sekolah_service.SchoolService/DeleteGuru"
	SchoolService_CreateNilaiAkhir_FullMethodName      = "/sekolah_service.SchoolService/CreateNilaiAkhir"
	SchoolService_GetNilaiAkhir_FullMethodName         = "/sekolah_service.SchoolService/GetNilaiAkhir"
	SchoolService_UpdateNilaiAkhir_FullMethodName      = "/sekolah_service.SchoolService/UpdateNilaiAkhir"
	SchoolService_DeleteNilaiAkhir_FullMethodName      = "/sekolah_service.SchoolService/DeleteNilaiAkhir"
	SchoolService_CreateKelas_FullMethodName           = "/sekolah_service.SchoolService/CreateKelas"
	SchoolService_GetKelas_FullMethodName              = "/sekolah_service.SchoolService/GetKelas"
	SchoolService_CreateIjazah_FullMethodName          = "/sekolah_service.SchoolService/CreateIjazah"
	SchoolService_GetIjazah_FullMethodName             = "/sekolah_service.SchoolService/GetIjazah"
	SchoolService_UpdateIjazah_FullMethodName          = "/sekolah_service.SchoolService/UpdateIjazah"
	SchoolService_DeleteIjazah_FullMethodName          = "/sekolah_service.SchoolService/DeleteIjazah"
)

// SchoolServiceClient is the client API for SchoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolServiceClient interface {
	GetSchoolInfo(ctx context.Context, in *SchoolRequest, opts ...grpc.CallOption) (*SchoolResponse, error)
	RegistrasiSekolah(ctx context.Context, in *TabelSekolahRequest, opts ...grpc.CallOption) (*TabelSekolahResponse, error)
	GetSekolahTabelTenant(ctx context.Context, in *SekolahTabelTenantRequest, opts ...grpc.CallOption) (*SekolahTabelTenantResponse, error)
	// // CRUD for Sekolah
	CreateSekolah(ctx context.Context, in *CreateSekolahRequest, opts ...grpc.CallOption) (*CreateSekolahResponse, error)
	GetSekolah(ctx context.Context, in *GetSekolahRequest, opts ...grpc.CallOption) (*GetSekolahResponse, error)
	// CRUD for Siswa
	CreateSiswa(ctx context.Context, in *CreateSiswaRequest, opts ...grpc.CallOption) (*CreateSiswaResponse, error)
	GetSiswa(ctx context.Context, in *GetSiswaRequest, opts ...grpc.CallOption) (*GetSiswaResponse, error)
	UpdateSiswa(ctx context.Context, in *UpdateSiswaRequest, opts ...grpc.CallOption) (*UpdateSiswaResponse, error)
	DeleteSiswa(ctx context.Context, in *DeleteSiswaRequest, opts ...grpc.CallOption) (*DeleteSiswaResponse, error)
	// CRUD for Guru
	CreateGuru(ctx context.Context, in *CreateGuruRequest, opts ...grpc.CallOption) (*CreateGuruResponse, error)
	GetGuru(ctx context.Context, in *GetGuruRequest, opts ...grpc.CallOption) (*GetGuruResponse, error)
	UpdateGuru(ctx context.Context, in *UpdateGuruRequest, opts ...grpc.CallOption) (*UpdateGuruResponse, error)
	DeleteGuru(ctx context.Context, in *DeleteGuruRequest, opts ...grpc.CallOption) (*DeleteGuruResponse, error)
	// Nilai Akhir
	CreateNilaiAkhir(ctx context.Context, in *CreateNilaiAkhirRequest, opts ...grpc.CallOption) (*CreateNilaiAkhirResponse, error)
	GetNilaiAkhir(ctx context.Context, in *GetNilaiAkhirRequest, opts ...grpc.CallOption) (*GetNilaiAkhirResponse, error)
	UpdateNilaiAkhir(ctx context.Context, in *UpdateNilaiAkhirRequest, opts ...grpc.CallOption) (*UpdateNilaiAkhirResponse, error)
	DeleteNilaiAkhir(ctx context.Context, in *DeleteNilaiAkhirRequest, opts ...grpc.CallOption) (*DeleteNilaiAkhirResponse, error)
	// Kelas
	CreateKelas(ctx context.Context, in *CreateKelasRequest, opts ...grpc.CallOption) (*CreateKelasResponse, error)
	GetKelas(ctx context.Context, in *GetKelasRequest, opts ...grpc.CallOption) (*GetKelasResponse, error)
	// Ijazah
	CreateIjazah(ctx context.Context, in *CreateIjazahRequest, opts ...grpc.CallOption) (*CreateIjazahResponse, error)
	GetIjazah(ctx context.Context, in *GetIjazahRequest, opts ...grpc.CallOption) (*GetIjazahResponse, error)
	UpdateIjazah(ctx context.Context, in *UpdateIjazahRequest, opts ...grpc.CallOption) (*UpdateIjazahResponse, error)
	DeleteIjazah(ctx context.Context, in *DeleteIjazahRequest, opts ...grpc.CallOption) (*DeleteIjazahResponse, error)
}

type schoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolServiceClient(cc grpc.ClientConnInterface) SchoolServiceClient {
	return &schoolServiceClient{cc}
}

func (c *schoolServiceClient) GetSchoolInfo(ctx context.Context, in *SchoolRequest, opts ...grpc.CallOption) (*SchoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchoolResponse)
	err := c.cc.Invoke(ctx, SchoolService_GetSchoolInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) RegistrasiSekolah(ctx context.Context, in *TabelSekolahRequest, opts ...grpc.CallOption) (*TabelSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TabelSekolahResponse)
	err := c.cc.Invoke(ctx, SchoolService_RegistrasiSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) GetSekolahTabelTenant(ctx context.Context, in *SekolahTabelTenantRequest, opts ...grpc.CallOption) (*SekolahTabelTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SekolahTabelTenantResponse)
	err := c.cc.Invoke(ctx, SchoolService_GetSekolahTabelTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) CreateSekolah(ctx context.Context, in *CreateSekolahRequest, opts ...grpc.CallOption) (*CreateSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSekolahResponse)
	err := c.cc.Invoke(ctx, SchoolService_CreateSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) GetSekolah(ctx context.Context, in *GetSekolahRequest, opts ...grpc.CallOption) (*GetSekolahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSekolahResponse)
	err := c.cc.Invoke(ctx, SchoolService_GetSekolah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) CreateSiswa(ctx context.Context, in *CreateSiswaRequest, opts ...grpc.CallOption) (*CreateSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSiswaResponse)
	err := c.cc.Invoke(ctx, SchoolService_CreateSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) GetSiswa(ctx context.Context, in *GetSiswaRequest, opts ...grpc.CallOption) (*GetSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSiswaResponse)
	err := c.cc.Invoke(ctx, SchoolService_GetSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) UpdateSiswa(ctx context.Context, in *UpdateSiswaRequest, opts ...grpc.CallOption) (*UpdateSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSiswaResponse)
	err := c.cc.Invoke(ctx, SchoolService_UpdateSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) DeleteSiswa(ctx context.Context, in *DeleteSiswaRequest, opts ...grpc.CallOption) (*DeleteSiswaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSiswaResponse)
	err := c.cc.Invoke(ctx, SchoolService_DeleteSiswa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) CreateGuru(ctx context.Context, in *CreateGuruRequest, opts ...grpc.CallOption) (*CreateGuruResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGuruResponse)
	err := c.cc.Invoke(ctx, SchoolService_CreateGuru_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) GetGuru(ctx context.Context, in *GetGuruRequest, opts ...grpc.CallOption) (*GetGuruResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuruResponse)
	err := c.cc.Invoke(ctx, SchoolService_GetGuru_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) UpdateGuru(ctx context.Context, in *UpdateGuruRequest, opts ...grpc.CallOption) (*UpdateGuruResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGuruResponse)
	err := c.cc.Invoke(ctx, SchoolService_UpdateGuru_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) DeleteGuru(ctx context.Context, in *DeleteGuruRequest, opts ...grpc.CallOption) (*DeleteGuruResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGuruResponse)
	err := c.cc.Invoke(ctx, SchoolService_DeleteGuru_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) CreateNilaiAkhir(ctx context.Context, in *CreateNilaiAkhirRequest, opts ...grpc.CallOption) (*CreateNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, SchoolService_CreateNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) GetNilaiAkhir(ctx context.Context, in *GetNilaiAkhirRequest, opts ...grpc.CallOption) (*GetNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, SchoolService_GetNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) UpdateNilaiAkhir(ctx context.Context, in *UpdateNilaiAkhirRequest, opts ...grpc.CallOption) (*UpdateNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, SchoolService_UpdateNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) DeleteNilaiAkhir(ctx context.Context, in *DeleteNilaiAkhirRequest, opts ...grpc.CallOption) (*DeleteNilaiAkhirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNilaiAkhirResponse)
	err := c.cc.Invoke(ctx, SchoolService_DeleteNilaiAkhir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) CreateKelas(ctx context.Context, in *CreateKelasRequest, opts ...grpc.CallOption) (*CreateKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKelasResponse)
	err := c.cc.Invoke(ctx, SchoolService_CreateKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) GetKelas(ctx context.Context, in *GetKelasRequest, opts ...grpc.CallOption) (*GetKelasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKelasResponse)
	err := c.cc.Invoke(ctx, SchoolService_GetKelas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) CreateIjazah(ctx context.Context, in *CreateIjazahRequest, opts ...grpc.CallOption) (*CreateIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIjazahResponse)
	err := c.cc.Invoke(ctx, SchoolService_CreateIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) GetIjazah(ctx context.Context, in *GetIjazahRequest, opts ...grpc.CallOption) (*GetIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIjazahResponse)
	err := c.cc.Invoke(ctx, SchoolService_GetIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) UpdateIjazah(ctx context.Context, in *UpdateIjazahRequest, opts ...grpc.CallOption) (*UpdateIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIjazahResponse)
	err := c.cc.Invoke(ctx, SchoolService_UpdateIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) DeleteIjazah(ctx context.Context, in *DeleteIjazahRequest, opts ...grpc.CallOption) (*DeleteIjazahResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIjazahResponse)
	err := c.cc.Invoke(ctx, SchoolService_DeleteIjazah_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServiceServer is the server API for SchoolService service.
// All implementations must embed UnimplementedSchoolServiceServer
// for forward compatibility.
type SchoolServiceServer interface {
	GetSchoolInfo(context.Context, *SchoolRequest) (*SchoolResponse, error)
	RegistrasiSekolah(context.Context, *TabelSekolahRequest) (*TabelSekolahResponse, error)
	GetSekolahTabelTenant(context.Context, *SekolahTabelTenantRequest) (*SekolahTabelTenantResponse, error)
	// // CRUD for Sekolah
	CreateSekolah(context.Context, *CreateSekolahRequest) (*CreateSekolahResponse, error)
	GetSekolah(context.Context, *GetSekolahRequest) (*GetSekolahResponse, error)
	// CRUD for Siswa
	CreateSiswa(context.Context, *CreateSiswaRequest) (*CreateSiswaResponse, error)
	GetSiswa(context.Context, *GetSiswaRequest) (*GetSiswaResponse, error)
	UpdateSiswa(context.Context, *UpdateSiswaRequest) (*UpdateSiswaResponse, error)
	DeleteSiswa(context.Context, *DeleteSiswaRequest) (*DeleteSiswaResponse, error)
	// CRUD for Guru
	CreateGuru(context.Context, *CreateGuruRequest) (*CreateGuruResponse, error)
	GetGuru(context.Context, *GetGuruRequest) (*GetGuruResponse, error)
	UpdateGuru(context.Context, *UpdateGuruRequest) (*UpdateGuruResponse, error)
	DeleteGuru(context.Context, *DeleteGuruRequest) (*DeleteGuruResponse, error)
	// Nilai Akhir
	CreateNilaiAkhir(context.Context, *CreateNilaiAkhirRequest) (*CreateNilaiAkhirResponse, error)
	GetNilaiAkhir(context.Context, *GetNilaiAkhirRequest) (*GetNilaiAkhirResponse, error)
	UpdateNilaiAkhir(context.Context, *UpdateNilaiAkhirRequest) (*UpdateNilaiAkhirResponse, error)
	DeleteNilaiAkhir(context.Context, *DeleteNilaiAkhirRequest) (*DeleteNilaiAkhirResponse, error)
	// Kelas
	CreateKelas(context.Context, *CreateKelasRequest) (*CreateKelasResponse, error)
	GetKelas(context.Context, *GetKelasRequest) (*GetKelasResponse, error)
	// Ijazah
	CreateIjazah(context.Context, *CreateIjazahRequest) (*CreateIjazahResponse, error)
	GetIjazah(context.Context, *GetIjazahRequest) (*GetIjazahResponse, error)
	UpdateIjazah(context.Context, *UpdateIjazahRequest) (*UpdateIjazahResponse, error)
	DeleteIjazah(context.Context, *DeleteIjazahRequest) (*DeleteIjazahResponse, error)
	mustEmbedUnimplementedSchoolServiceServer()
}

// UnimplementedSchoolServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchoolServiceServer struct{}

func (UnimplementedSchoolServiceServer) GetSchoolInfo(context.Context, *SchoolRequest) (*SchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchoolInfo not implemented")
}
func (UnimplementedSchoolServiceServer) RegistrasiSekolah(context.Context, *TabelSekolahRequest) (*TabelSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrasiSekolah not implemented")
}
func (UnimplementedSchoolServiceServer) GetSekolahTabelTenant(context.Context, *SekolahTabelTenantRequest) (*SekolahTabelTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSekolahTabelTenant not implemented")
}
func (UnimplementedSchoolServiceServer) CreateSekolah(context.Context, *CreateSekolahRequest) (*CreateSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSekolah not implemented")
}
func (UnimplementedSchoolServiceServer) GetSekolah(context.Context, *GetSekolahRequest) (*GetSekolahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSekolah not implemented")
}
func (UnimplementedSchoolServiceServer) CreateSiswa(context.Context, *CreateSiswaRequest) (*CreateSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSiswa not implemented")
}
func (UnimplementedSchoolServiceServer) GetSiswa(context.Context, *GetSiswaRequest) (*GetSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiswa not implemented")
}
func (UnimplementedSchoolServiceServer) UpdateSiswa(context.Context, *UpdateSiswaRequest) (*UpdateSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSiswa not implemented")
}
func (UnimplementedSchoolServiceServer) DeleteSiswa(context.Context, *DeleteSiswaRequest) (*DeleteSiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSiswa not implemented")
}
func (UnimplementedSchoolServiceServer) CreateGuru(context.Context, *CreateGuruRequest) (*CreateGuruResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuru not implemented")
}
func (UnimplementedSchoolServiceServer) GetGuru(context.Context, *GetGuruRequest) (*GetGuruResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuru not implemented")
}
func (UnimplementedSchoolServiceServer) UpdateGuru(context.Context, *UpdateGuruRequest) (*UpdateGuruResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuru not implemented")
}
func (UnimplementedSchoolServiceServer) DeleteGuru(context.Context, *DeleteGuruRequest) (*DeleteGuruResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuru not implemented")
}
func (UnimplementedSchoolServiceServer) CreateNilaiAkhir(context.Context, *CreateNilaiAkhirRequest) (*CreateNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNilaiAkhir not implemented")
}
func (UnimplementedSchoolServiceServer) GetNilaiAkhir(context.Context, *GetNilaiAkhirRequest) (*GetNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNilaiAkhir not implemented")
}
func (UnimplementedSchoolServiceServer) UpdateNilaiAkhir(context.Context, *UpdateNilaiAkhirRequest) (*UpdateNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNilaiAkhir not implemented")
}
func (UnimplementedSchoolServiceServer) DeleteNilaiAkhir(context.Context, *DeleteNilaiAkhirRequest) (*DeleteNilaiAkhirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNilaiAkhir not implemented")
}
func (UnimplementedSchoolServiceServer) CreateKelas(context.Context, *CreateKelasRequest) (*CreateKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKelas not implemented")
}
func (UnimplementedSchoolServiceServer) GetKelas(context.Context, *GetKelasRequest) (*GetKelasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKelas not implemented")
}
func (UnimplementedSchoolServiceServer) CreateIjazah(context.Context, *CreateIjazahRequest) (*CreateIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIjazah not implemented")
}
func (UnimplementedSchoolServiceServer) GetIjazah(context.Context, *GetIjazahRequest) (*GetIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIjazah not implemented")
}
func (UnimplementedSchoolServiceServer) UpdateIjazah(context.Context, *UpdateIjazahRequest) (*UpdateIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIjazah not implemented")
}
func (UnimplementedSchoolServiceServer) DeleteIjazah(context.Context, *DeleteIjazahRequest) (*DeleteIjazahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIjazah not implemented")
}
func (UnimplementedSchoolServiceServer) mustEmbedUnimplementedSchoolServiceServer() {}
func (UnimplementedSchoolServiceServer) testEmbeddedByValue()                       {}

// UnsafeSchoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolServiceServer will
// result in compilation errors.
type UnsafeSchoolServiceServer interface {
	mustEmbedUnimplementedSchoolServiceServer()
}

func RegisterSchoolServiceServer(s grpc.ServiceRegistrar, srv SchoolServiceServer) {
	// If the following call pancis, it indicates UnimplementedSchoolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchoolService_ServiceDesc, srv)
}

func _SchoolService_GetSchoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetSchoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetSchoolInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetSchoolInfo(ctx, req.(*SchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_RegistrasiSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TabelSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).RegistrasiSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_RegistrasiSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).RegistrasiSekolah(ctx, req.(*TabelSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_GetSekolahTabelTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SekolahTabelTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetSekolahTabelTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetSekolahTabelTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetSekolahTabelTenant(ctx, req.(*SekolahTabelTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_CreateSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).CreateSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_CreateSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).CreateSekolah(ctx, req.(*CreateSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_GetSekolah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSekolahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetSekolah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetSekolah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetSekolah(ctx, req.(*GetSekolahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_CreateSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).CreateSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_CreateSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).CreateSiswa(ctx, req.(*CreateSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_GetSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetSiswa(ctx, req.(*GetSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_UpdateSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).UpdateSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_UpdateSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).UpdateSiswa(ctx, req.(*UpdateSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_DeleteSiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).DeleteSiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_DeleteSiswa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).DeleteSiswa(ctx, req.(*DeleteSiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_CreateGuru_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuruRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).CreateGuru(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_CreateGuru_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).CreateGuru(ctx, req.(*CreateGuruRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_GetGuru_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuruRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetGuru(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetGuru_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetGuru(ctx, req.(*GetGuruRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_UpdateGuru_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuruRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).UpdateGuru(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_UpdateGuru_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).UpdateGuru(ctx, req.(*UpdateGuruRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_DeleteGuru_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuruRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).DeleteGuru(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_DeleteGuru_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).DeleteGuru(ctx, req.(*DeleteGuruRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_CreateNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).CreateNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_CreateNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).CreateNilaiAkhir(ctx, req.(*CreateNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_GetNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetNilaiAkhir(ctx, req.(*GetNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_UpdateNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).UpdateNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_UpdateNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).UpdateNilaiAkhir(ctx, req.(*UpdateNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_DeleteNilaiAkhir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNilaiAkhirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).DeleteNilaiAkhir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_DeleteNilaiAkhir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).DeleteNilaiAkhir(ctx, req.(*DeleteNilaiAkhirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_CreateKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).CreateKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_CreateKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).CreateKelas(ctx, req.(*CreateKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_GetKelas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKelasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetKelas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetKelas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetKelas(ctx, req.(*GetKelasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_CreateIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).CreateIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_CreateIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).CreateIjazah(ctx, req.(*CreateIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_GetIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_GetIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetIjazah(ctx, req.(*GetIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_UpdateIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).UpdateIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_UpdateIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).UpdateIjazah(ctx, req.(*UpdateIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_DeleteIjazah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIjazahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).DeleteIjazah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_DeleteIjazah_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).DeleteIjazah(ctx, req.(*DeleteIjazahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchoolService_ServiceDesc is the grpc.ServiceDesc for SchoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekolah_service.SchoolService",
	HandlerType: (*SchoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchoolInfo",
			Handler:    _SchoolService_GetSchoolInfo_Handler,
		},
		{
			MethodName: "RegistrasiSekolah",
			Handler:    _SchoolService_RegistrasiSekolah_Handler,
		},
		{
			MethodName: "GetSekolahTabelTenant",
			Handler:    _SchoolService_GetSekolahTabelTenant_Handler,
		},
		{
			MethodName: "CreateSekolah",
			Handler:    _SchoolService_CreateSekolah_Handler,
		},
		{
			MethodName: "GetSekolah",
			Handler:    _SchoolService_GetSekolah_Handler,
		},
		{
			MethodName: "CreateSiswa",
			Handler:    _SchoolService_CreateSiswa_Handler,
		},
		{
			MethodName: "GetSiswa",
			Handler:    _SchoolService_GetSiswa_Handler,
		},
		{
			MethodName: "UpdateSiswa",
			Handler:    _SchoolService_UpdateSiswa_Handler,
		},
		{
			MethodName: "DeleteSiswa",
			Handler:    _SchoolService_DeleteSiswa_Handler,
		},
		{
			MethodName: "CreateGuru",
			Handler:    _SchoolService_CreateGuru_Handler,
		},
		{
			MethodName: "GetGuru",
			Handler:    _SchoolService_GetGuru_Handler,
		},
		{
			MethodName: "UpdateGuru",
			Handler:    _SchoolService_UpdateGuru_Handler,
		},
		{
			MethodName: "DeleteGuru",
			Handler:    _SchoolService_DeleteGuru_Handler,
		},
		{
			MethodName: "CreateNilaiAkhir",
			Handler:    _SchoolService_CreateNilaiAkhir_Handler,
		},
		{
			MethodName: "GetNilaiAkhir",
			Handler:    _SchoolService_GetNilaiAkhir_Handler,
		},
		{
			MethodName: "UpdateNilaiAkhir",
			Handler:    _SchoolService_UpdateNilaiAkhir_Handler,
		},
		{
			MethodName: "DeleteNilaiAkhir",
			Handler:    _SchoolService_DeleteNilaiAkhir_Handler,
		},
		{
			MethodName: "CreateKelas",
			Handler:    _SchoolService_CreateKelas_Handler,
		},
		{
			MethodName: "GetKelas",
			Handler:    _SchoolService_GetKelas_Handler,
		},
		{
			MethodName: "CreateIjazah",
			Handler:    _SchoolService_CreateIjazah_Handler,
		},
		{
			MethodName: "GetIjazah",
			Handler:    _SchoolService_GetIjazah_Handler,
		},
		{
			MethodName: "UpdateIjazah",
			Handler:    _SchoolService_UpdateIjazah_Handler,
		},
		{
			MethodName: "DeleteIjazah",
			Handler:    _SchoolService_DeleteIjazah_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sekolah.proto",
}
