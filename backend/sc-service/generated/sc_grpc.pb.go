// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: sc.proto

package sc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EthService_GetChainId_FullMethodName = "/sc_service.EthService/GetChainId"
	EthService_GetBalance_FullMethodName = "/sc_service.EthService/GetBalance"
)

// EthServiceClient is the client API for EthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthServiceClient interface {
	// Mendapatkan Chain ID
	GetChainId(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ChainIdResponse, error)
	// Mendapatkan Saldo
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
}

type ethServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEthServiceClient(cc grpc.ClientConnInterface) EthServiceClient {
	return &ethServiceClient{cc}
}

func (c *ethServiceClient) GetChainId(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ChainIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChainIdResponse)
	err := c.cc.Invoke(ctx, EthService_GetChainId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethServiceClient) GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, EthService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthServiceServer is the server API for EthService service.
// All implementations must embed UnimplementedEthServiceServer
// for forward compatibility.
type EthServiceServer interface {
	// Mendapatkan Chain ID
	GetChainId(context.Context, *EmptyRequest) (*ChainIdResponse, error)
	// Mendapatkan Saldo
	GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	mustEmbedUnimplementedEthServiceServer()
}

// UnimplementedEthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEthServiceServer struct{}

func (UnimplementedEthServiceServer) GetChainId(context.Context, *EmptyRequest) (*ChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainId not implemented")
}
func (UnimplementedEthServiceServer) GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedEthServiceServer) mustEmbedUnimplementedEthServiceServer() {}
func (UnimplementedEthServiceServer) testEmbeddedByValue()                    {}

// UnsafeEthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthServiceServer will
// result in compilation errors.
type UnsafeEthServiceServer interface {
	mustEmbedUnimplementedEthServiceServer()
}

func RegisterEthServiceServer(s grpc.ServiceRegistrar, srv EthServiceServer) {
	// If the following call pancis, it indicates UnimplementedEthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EthService_ServiceDesc, srv)
}

func _EthService_GetChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServiceServer).GetChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthService_GetChainId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServiceServer).GetChainId(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServiceServer).GetBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EthService_ServiceDesc is the grpc.ServiceDesc for EthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sc_service.EthService",
	HandlerType: (*EthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChainId",
			Handler:    _EthService_GetChainId_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _EthService_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sc.proto",
}

const (
	BlockchainService_SetConfig_FullMethodName             = "/sc_service.BlockchainService/SetConfig"
	BlockchainService_GetNetworkID_FullMethodName          = "/sc_service.BlockchainService/GetNetworkID"
	BlockchainService_GetConsensusAlgorithm_FullMethodName = "/sc_service.BlockchainService/GetConsensusAlgorithm"
)

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =======================================
type BlockchainServiceClient interface {
	// Mengatur konfigurasi blockchain (Ethereum atau Quorum)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	// Mendapatkan informasi network ID
	GetNetworkID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkIDResponse, error)
	// Jika Quorum, dapatkan algoritma konsensus
	GetConsensusAlgorithm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConsensusAlgorithmResponse, error)
}

type blockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServiceClient(cc grpc.ClientConnInterface) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, BlockchainService_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetNetworkID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetworkIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkIDResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetNetworkID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetConsensusAlgorithm(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConsensusAlgorithmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsensusAlgorithmResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetConsensusAlgorithm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServiceServer is the server API for BlockchainService service.
// All implementations must embed UnimplementedBlockchainServiceServer
// for forward compatibility.
//
// =======================================
type BlockchainServiceServer interface {
	// Mengatur konfigurasi blockchain (Ethereum atau Quorum)
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	// Mendapatkan informasi network ID
	GetNetworkID(context.Context, *Empty) (*NetworkIDResponse, error)
	// Jika Quorum, dapatkan algoritma konsensus
	GetConsensusAlgorithm(context.Context, *Empty) (*ConsensusAlgorithmResponse, error)
	mustEmbedUnimplementedBlockchainServiceServer()
}

// UnimplementedBlockchainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockchainServiceServer struct{}

func (UnimplementedBlockchainServiceServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedBlockchainServiceServer) GetNetworkID(context.Context, *Empty) (*NetworkIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkID not implemented")
}
func (UnimplementedBlockchainServiceServer) GetConsensusAlgorithm(context.Context, *Empty) (*ConsensusAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsensusAlgorithm not implemented")
}
func (UnimplementedBlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {}
func (UnimplementedBlockchainServiceServer) testEmbeddedByValue()                           {}

// UnsafeBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServiceServer will
// result in compilation errors.
type UnsafeBlockchainServiceServer interface {
	mustEmbedUnimplementedBlockchainServiceServer()
}

func RegisterBlockchainServiceServer(s grpc.ServiceRegistrar, srv BlockchainServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlockchainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockchainService_ServiceDesc, srv)
}

func _BlockchainService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetNetworkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetNetworkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetNetworkID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetNetworkID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetConsensusAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetConsensusAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetConsensusAlgorithm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetConsensusAlgorithm(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainService_ServiceDesc is the grpc.ServiceDesc for BlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sc_service.BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _BlockchainService_SetConfig_Handler,
		},
		{
			MethodName: "GetNetworkID",
			Handler:    _BlockchainService_GetNetworkID_Handler,
		},
		{
			MethodName: "GetConsensusAlgorithm",
			Handler:    _BlockchainService_GetConsensusAlgorithm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sc.proto",
}
