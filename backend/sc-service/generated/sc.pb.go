// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.28.3
// source: sc.proto

package sc_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ==================================
// ============CONTRACT==============
type BCAccountType int32

const (
	BCAccountType_imported BCAccountType = 0
	BCAccountType_keystore BCAccountType = 1
)

// Enum value maps for BCAccountType.
var (
	BCAccountType_name = map[int32]string{
		0: "imported",
		1: "keystore",
	}
	BCAccountType_value = map[string]int32{
		"imported": 0,
		"keystore": 1,
	}
)

func (x BCAccountType) Enum() *BCAccountType {
	p := new(BCAccountType)
	*p = x
	return p
}

func (x BCAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BCAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_sc_proto_enumTypes[0].Descriptor()
}

func (BCAccountType) Type() protoreflect.EnumType {
	return &file_sc_proto_enumTypes[0]
}

func (x BCAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BCAccountType.Descriptor instead.
func (BCAccountType) EnumDescriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{0}
}

type NetworkType int32

const (
	NetworkType_mainnet NetworkType = 0
	NetworkType_testnet NetworkType = 1
	NetworkType_private NetworkType = 2
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "mainnet",
		1: "testnet",
		2: "private",
	}
	NetworkType_value = map[string]int32{
		"mainnet": 0,
		"testnet": 1,
		"private": 2,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_sc_proto_enumTypes[1].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_sc_proto_enumTypes[1]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{1}
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_sc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{0}
}

type SetConfigRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BlockchainType string                 `protobuf:"bytes,1,opt,name=blockchain_type,json=blockchainType,proto3" json:"blockchain_type,omitempty"`
	RpcUrl         string                 `protobuf:"bytes,2,opt,name=rpc_url,json=rpcUrl,proto3" json:"rpc_url,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	mi := &file_sc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{1}
}

func (x *SetConfigRequest) GetBlockchainType() string {
	if x != nil {
		return x.BlockchainType
	}
	return ""
}

func (x *SetConfigRequest) GetRpcUrl() string {
	if x != nil {
		return x.RpcUrl
	}
	return ""
}

type SetConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConfigResponse) Reset() {
	*x = SetConfigResponse{}
	mi := &file_sc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse) ProtoMessage() {}

func (x *SetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse.ProtoReflect.Descriptor instead.
func (*SetConfigResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{2}
}

func (x *SetConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NetworkIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     string                 `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkIDResponse) Reset() {
	*x = NetworkIDResponse{}
	mi := &file_sc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkIDResponse) ProtoMessage() {}

func (x *NetworkIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkIDResponse.ProtoReflect.Descriptor instead.
func (*NetworkIDResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkIDResponse) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type SendETHRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Amount        string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PrivateKey    string                 `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendETHRequest) Reset() {
	*x = SendETHRequest{}
	mi := &file_sc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendETHRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendETHRequest) ProtoMessage() {}

func (x *SendETHRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendETHRequest.ProtoReflect.Descriptor instead.
func (*SendETHRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{4}
}

func (x *SendETHRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SendETHRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SendETHRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SendETHRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type SendETHResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendETHResponse) Reset() {
	*x = SendETHResponse{}
	mi := &file_sc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendETHResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendETHResponse) ProtoMessage() {}

func (x *SendETHResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendETHResponse.ProtoReflect.Descriptor instead.
func (*SendETHResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{5}
}

func (x *SendETHResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type GetTokenBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenAddress  string                 `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	OwnerAddress  string                 `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenBalanceRequest) Reset() {
	*x = GetTokenBalanceRequest{}
	mi := &file_sc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenBalanceRequest) ProtoMessage() {}

func (x *GetTokenBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetTokenBalanceRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{6}
}

func (x *GetTokenBalanceRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *GetTokenBalanceRequest) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

type GetTokenBalanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       string                 `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenBalanceResponse) Reset() {
	*x = GetTokenBalanceResponse{}
	mi := &file_sc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenBalanceResponse) ProtoMessage() {}

func (x *GetTokenBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetTokenBalanceResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{7}
}

func (x *GetTokenBalanceResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type TransferTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenAddress  string                 `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	From          string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount        string                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	PrivateKey    string                 `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	GasLimit      uint64                 `protobuf:"varint,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferTokenRequest) Reset() {
	*x = TransferTokenRequest{}
	mi := &file_sc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferTokenRequest) ProtoMessage() {}

func (x *TransferTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferTokenRequest.ProtoReflect.Descriptor instead.
func (*TransferTokenRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{8}
}

func (x *TransferTokenRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *TransferTokenRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransferTokenRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransferTokenRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransferTokenRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *TransferTokenRequest) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

type TransferTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferTokenResponse) Reset() {
	*x = TransferTokenResponse{}
	mi := &file_sc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferTokenResponse) ProtoMessage() {}

func (x *TransferTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferTokenResponse.ProtoReflect.Descriptor instead.
func (*TransferTokenResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{9}
}

func (x *TransferTokenResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type ApproveTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenAddress  string                 `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	Spender       string                 `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Amount        string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PrivateKey    string                 `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	GasLimit      uint64                 `protobuf:"varint,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveTokenRequest) Reset() {
	*x = ApproveTokenRequest{}
	mi := &file_sc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTokenRequest) ProtoMessage() {}

func (x *ApproveTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTokenRequest.ProtoReflect.Descriptor instead.
func (*ApproveTokenRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{10}
}

func (x *ApproveTokenRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *ApproveTokenRequest) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *ApproveTokenRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ApproveTokenRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *ApproveTokenRequest) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

type ApproveTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveTokenResponse) Reset() {
	*x = ApproveTokenResponse{}
	mi := &file_sc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTokenResponse) ProtoMessage() {}

func (x *ApproveTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTokenResponse.ProtoReflect.Descriptor instead.
func (*ApproveTokenResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{11}
}

func (x *ApproveTokenResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type GetTokenAllowanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenAddress  string                 `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	Owner         string                 `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender       string                 `protobuf:"bytes,3,opt,name=spender,proto3" json:"spender,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenAllowanceRequest) Reset() {
	*x = GetTokenAllowanceRequest{}
	mi := &file_sc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenAllowanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenAllowanceRequest) ProtoMessage() {}

func (x *GetTokenAllowanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenAllowanceRequest.ProtoReflect.Descriptor instead.
func (*GetTokenAllowanceRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{12}
}

func (x *GetTokenAllowanceRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *GetTokenAllowanceRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetTokenAllowanceRequest) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

type GetTokenAllowanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Allowance     string                 `protobuf:"bytes,1,opt,name=allowance,proto3" json:"allowance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenAllowanceResponse) Reset() {
	*x = GetTokenAllowanceResponse{}
	mi := &file_sc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenAllowanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenAllowanceResponse) ProtoMessage() {}

func (x *GetTokenAllowanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenAllowanceResponse.ProtoReflect.Descriptor instead.
func (*GetTokenAllowanceResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{13}
}

func (x *GetTokenAllowanceResponse) GetAllowance() string {
	if x != nil {
		return x.Allowance
	}
	return ""
}

type DeployIjazahContractRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AcountType    BCAccountType          `protobuf:"varint,1,opt,name=acount_type,json=acountType,proto3,enum=sc_service.BCAccountType" json:"acount_type,omitempty"`
	GasLimit      uint64                 `protobuf:"varint,2,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	PrivateKey    string                 `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Schemaname    string                 `protobuf:"bytes,6,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployIjazahContractRequest) Reset() {
	*x = DeployIjazahContractRequest{}
	mi := &file_sc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployIjazahContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployIjazahContractRequest) ProtoMessage() {}

func (x *DeployIjazahContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployIjazahContractRequest.ProtoReflect.Descriptor instead.
func (*DeployIjazahContractRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{14}
}

func (x *DeployIjazahContractRequest) GetAcountType() BCAccountType {
	if x != nil {
		return x.AcountType
	}
	return BCAccountType_imported
}

func (x *DeployIjazahContractRequest) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *DeployIjazahContractRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *DeployIjazahContractRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeployIjazahContractRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeployIjazahContractRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

type DeployIjazahContractResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TxHash          string                 `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeployIjazahContractResponse) Reset() {
	*x = DeployIjazahContractResponse{}
	mi := &file_sc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployIjazahContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployIjazahContractResponse) ProtoMessage() {}

func (x *DeployIjazahContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployIjazahContractResponse.ProtoReflect.Descriptor instead.
func (*DeployIjazahContractResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{15}
}

func (x *DeployIjazahContractResponse) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *DeployIjazahContractResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type GetContractRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Schemaname      string                 `protobuf:"bytes,2,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetContractRequest) Reset() {
	*x = GetContractRequest{}
	mi := &file_sc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractRequest) ProtoMessage() {}

func (x *GetContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractRequest.ProtoReflect.Descriptor instead.
func (*GetContractRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{16}
}

func (x *GetContractRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetContractRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

type GetContractResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Bytecode        string                 `protobuf:"bytes,2,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Abi             string                 `protobuf:"bytes,3,opt,name=abi,proto3" json:"abi,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetContractResponse) Reset() {
	*x = GetContractResponse{}
	mi := &file_sc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractResponse) ProtoMessage() {}

func (x *GetContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractResponse.ProtoReflect.Descriptor instead.
func (*GetContractResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{17}
}

func (x *GetContractResponse) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetContractResponse) GetBytecode() string {
	if x != nil {
		return x.Bytecode
	}
	return ""
}

func (x *GetContractResponse) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

type CallContractMethodRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Abi             string                 `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
	Method          string                 `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Params          []string               `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	Schemaname      string                 `protobuf:"bytes,5,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CallContractMethodRequest) Reset() {
	*x = CallContractMethodRequest{}
	mi := &file_sc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallContractMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContractMethodRequest) ProtoMessage() {}

func (x *CallContractMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContractMethodRequest.ProtoReflect.Descriptor instead.
func (*CallContractMethodRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{18}
}

func (x *CallContractMethodRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *CallContractMethodRequest) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *CallContractMethodRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CallContractMethodRequest) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CallContractMethodRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

type SendTransactionToContractRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Abi             string                 `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
	Method          string                 `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Params          []string               `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	PrivateKey      string                 `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	GasLimit        uint64                 `protobuf:"varint,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Schemaname      string                 `protobuf:"bytes,7,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SendTransactionToContractRequest) Reset() {
	*x = SendTransactionToContractRequest{}
	mi := &file_sc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTransactionToContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionToContractRequest) ProtoMessage() {}

func (x *SendTransactionToContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionToContractRequest.ProtoReflect.Descriptor instead.
func (*SendTransactionToContractRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{19}
}

func (x *SendTransactionToContractRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *SendTransactionToContractRequest) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *SendTransactionToContractRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SendTransactionToContractRequest) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SendTransactionToContractRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SendTransactionToContractRequest) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *SendTransactionToContractRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

type SendTransactionToContractResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTransactionToContractResponse) Reset() {
	*x = SendTransactionToContractResponse{}
	mi := &file_sc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTransactionToContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionToContractResponse) ProtoMessage() {}

func (x *SendTransactionToContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionToContractResponse.ProtoReflect.Descriptor instead.
func (*SendTransactionToContractResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{20}
}

func (x *SendTransactionToContractResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type GetContractOwnerRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Abi             string                 `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetContractOwnerRequest) Reset() {
	*x = GetContractOwnerRequest{}
	mi := &file_sc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContractOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractOwnerRequest) ProtoMessage() {}

func (x *GetContractOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractOwnerRequest.ProtoReflect.Descriptor instead.
func (*GetContractOwnerRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{21}
}

func (x *GetContractOwnerRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetContractOwnerRequest) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

type GetContractOwnerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OwnerAddress  string                 `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContractOwnerResponse) Reset() {
	*x = GetContractOwnerResponse{}
	mi := &file_sc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContractOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractOwnerResponse) ProtoMessage() {}

func (x *GetContractOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractOwnerResponse.ProtoReflect.Descriptor instead.
func (*GetContractOwnerResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{22}
}

func (x *GetContractOwnerResponse) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

type GetContractEventsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContractAddress string                 `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Abi             string                 `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
	EventName       string                 `protobuf:"bytes,3,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	FromBlock       uint64                 `protobuf:"varint,4,opt,name=from_block,json=fromBlock,proto3" json:"from_block,omitempty"`
	ToBlock         uint64                 `protobuf:"varint,5,opt,name=to_block,json=toBlock,proto3" json:"to_block,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetContractEventsRequest) Reset() {
	*x = GetContractEventsRequest{}
	mi := &file_sc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContractEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractEventsRequest) ProtoMessage() {}

func (x *GetContractEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractEventsRequest.ProtoReflect.Descriptor instead.
func (*GetContractEventsRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{23}
}

func (x *GetContractEventsRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetContractEventsRequest) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *GetContractEventsRequest) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *GetContractEventsRequest) GetFromBlock() uint64 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *GetContractEventsRequest) GetToBlock() uint64 {
	if x != nil {
		return x.ToBlock
	}
	return 0
}

type GetContractEventsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []string               `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContractEventsResponse) Reset() {
	*x = GetContractEventsResponse{}
	mi := &file_sc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContractEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractEventsResponse) ProtoMessage() {}

func (x *GetContractEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractEventsResponse.ProtoReflect.Descriptor instead.
func (*GetContractEventsResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{24}
}

func (x *GetContractEventsResponse) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

type CallContractMethodResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallContractMethodResponse) Reset() {
	*x = CallContractMethodResponse{}
	mi := &file_sc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallContractMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContractMethodResponse) ProtoMessage() {}

func (x *CallContractMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContractMethodResponse.ProtoReflect.Descriptor instead.
func (*CallContractMethodResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{25}
}

func (x *CallContractMethodResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type GetGasPriceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GasPrice      string                 `protobuf:"bytes,1,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGasPriceResponse) Reset() {
	*x = GetGasPriceResponse{}
	mi := &file_sc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGasPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGasPriceResponse) ProtoMessage() {}

func (x *GetGasPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGasPriceResponse.ProtoReflect.Descriptor instead.
func (*GetGasPriceResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{26}
}

func (x *GetGasPriceResponse) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

type GetNonceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNonceRequest) Reset() {
	*x = GetNonceRequest{}
	mi := &file_sc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNonceRequest) ProtoMessage() {}

func (x *GetNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNonceRequest.ProtoReflect.Descriptor instead.
func (*GetNonceRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{27}
}

func (x *GetNonceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetNonceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         uint64                 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNonceResponse) Reset() {
	*x = GetNonceResponse{}
	mi := &file_sc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNonceResponse) ProtoMessage() {}

func (x *GetNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNonceResponse.ProtoReflect.Descriptor instead.
func (*GetNonceResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{28}
}

func (x *GetNonceResponse) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type GetTransactionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionStatusRequest) Reset() {
	*x = GetTransactionStatusRequest{}
	mi := &file_sc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusRequest) ProtoMessage() {}

func (x *GetTransactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{29}
}

func (x *GetTransactionStatusRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type GetTransactionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionStatusResponse) Reset() {
	*x = GetTransactionStatusResponse{}
	mi := &file_sc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusResponse) ProtoMessage() {}

func (x *GetTransactionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{30}
}

func (x *GetTransactionStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AdminSekolah struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SekolahId       int32                  `protobuf:"varint,1,opt,name=sekolah_id,json=sekolahId,proto3" json:"sekolah_id,omitempty"`
	UserId          int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Password        string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	NamaSekolah     string                 `protobuf:"bytes,4,opt,name=nama_sekolah,json=namaSekolah,proto3" json:"nama_sekolah,omitempty"`
	SekolahIdEnkrip string                 `protobuf:"bytes,5,opt,name=sekolah_id_enkrip,json=sekolahIdEnkrip,proto3" json:"sekolah_id_enkrip,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AdminSekolah) Reset() {
	*x = AdminSekolah{}
	mi := &file_sc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminSekolah) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminSekolah) ProtoMessage() {}

func (x *AdminSekolah) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminSekolah.ProtoReflect.Descriptor instead.
func (*AdminSekolah) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{31}
}

func (x *AdminSekolah) GetSekolahId() int32 {
	if x != nil {
		return x.SekolahId
	}
	return 0
}

func (x *AdminSekolah) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AdminSekolah) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AdminSekolah) GetNamaSekolah() string {
	if x != nil {
		return x.NamaSekolah
	}
	return ""
}

func (x *AdminSekolah) GetSekolahIdEnkrip() string {
	if x != nil {
		return x.SekolahIdEnkrip
	}
	return ""
}

type BlockchainAccount struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Address           string                 `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Username          string                 `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Type              BCAccountType          `protobuf:"varint,3,opt,name=Type,proto3,enum=sc_service.BCAccountType" json:"Type,omitempty"`
	UserId            int32                  `protobuf:"varint,4,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Password          string                 `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`
	KeystrokeFilename string                 `protobuf:"bytes,6,opt,name=KeystrokeFilename,proto3" json:"KeystrokeFilename,omitempty"`
	NetworkId         uint32                 `protobuf:"varint,7,opt,name=NetworkId,proto3" json:"NetworkId,omitempty"`
	Network           *BCNetwork             `protobuf:"bytes,8,opt,name=Network,proto3" json:"Network,omitempty"`
	Organization      string                 `protobuf:"bytes,9,opt,name=Organization,proto3" json:"Organization,omitempty"`
	IsActive          bool                   `protobuf:"varint,10,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BlockchainAccount) Reset() {
	*x = BlockchainAccount{}
	mi := &file_sc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockchainAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainAccount) ProtoMessage() {}

func (x *BlockchainAccount) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainAccount.ProtoReflect.Descriptor instead.
func (*BlockchainAccount) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{32}
}

func (x *BlockchainAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BlockchainAccount) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BlockchainAccount) GetType() BCAccountType {
	if x != nil {
		return x.Type
	}
	return BCAccountType_imported
}

func (x *BlockchainAccount) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockchainAccount) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BlockchainAccount) GetKeystrokeFilename() string {
	if x != nil {
		return x.KeystrokeFilename
	}
	return ""
}

func (x *BlockchainAccount) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *BlockchainAccount) GetNetwork() *BCNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *BlockchainAccount) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *BlockchainAccount) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type CreateBlockchainAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Admin         *AdminSekolah          `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Network       *BCNetwork             `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Schemaname    string                 `protobuf:"bytes,3,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlockchainAccountRequest) Reset() {
	*x = CreateBlockchainAccountRequest{}
	mi := &file_sc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlockchainAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlockchainAccountRequest) ProtoMessage() {}

func (x *CreateBlockchainAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlockchainAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateBlockchainAccountRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{33}
}

func (x *CreateBlockchainAccountRequest) GetAdmin() *AdminSekolah {
	if x != nil {
		return x.Admin
	}
	return nil
}

func (x *CreateBlockchainAccountRequest) GetNetwork() *BCNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateBlockchainAccountRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

type CreateBlockchainAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //contract_address
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlockchainAccountResponse) Reset() {
	*x = CreateBlockchainAccountResponse{}
	mi := &file_sc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlockchainAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlockchainAccountResponse) ProtoMessage() {}

func (x *CreateBlockchainAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlockchainAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateBlockchainAccountResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{34}
}

func (x *CreateBlockchainAccountResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CreateBlockchainAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ImportBlockchainAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivateKey    string                 `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Admin         *AdminSekolah          `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	Network       *BCNetwork             `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Schemaname    string                 `protobuf:"bytes,4,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportBlockchainAccountRequest) Reset() {
	*x = ImportBlockchainAccountRequest{}
	mi := &file_sc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportBlockchainAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBlockchainAccountRequest) ProtoMessage() {}

func (x *ImportBlockchainAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBlockchainAccountRequest.ProtoReflect.Descriptor instead.
func (*ImportBlockchainAccountRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{35}
}

func (x *ImportBlockchainAccountRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *ImportBlockchainAccountRequest) GetAdmin() *AdminSekolah {
	if x != nil {
		return x.Admin
	}
	return nil
}

func (x *ImportBlockchainAccountRequest) GetNetwork() *BCNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ImportBlockchainAccountRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

type ImportBlockchainAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` //contract_address
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportBlockchainAccountResponse) Reset() {
	*x = ImportBlockchainAccountResponse{}
	mi := &file_sc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportBlockchainAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBlockchainAccountResponse) ProtoMessage() {}

func (x *ImportBlockchainAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBlockchainAccountResponse.ProtoReflect.Descriptor instead.
func (*ImportBlockchainAccountResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{36}
}

func (x *ImportBlockchainAccountResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ImportBlockchainAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetBlockchainAccountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Schemaname    string                 `protobuf:"bytes,2,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	NetworkId     uint32                 `protobuf:"varint,3,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockchainAccountsRequest) Reset() {
	*x = GetBlockchainAccountsRequest{}
	mi := &file_sc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockchainAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainAccountsRequest) ProtoMessage() {}

func (x *GetBlockchainAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainAccountsRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainAccountsRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{37}
}

func (x *GetBlockchainAccountsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetBlockchainAccountsRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

func (x *GetBlockchainAccountsRequest) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

type GetBlockchainAccountsResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Status             bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Blockchainaccounts []*BlockchainAccount   `protobuf:"bytes,2,rep,name=blockchainaccounts,proto3" json:"blockchainaccounts,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetBlockchainAccountsResponse) Reset() {
	*x = GetBlockchainAccountsResponse{}
	mi := &file_sc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockchainAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainAccountsResponse) ProtoMessage() {}

func (x *GetBlockchainAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainAccountsResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainAccountsResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{38}
}

func (x *GetBlockchainAccountsResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *GetBlockchainAccountsResponse) GetBlockchainaccounts() []*BlockchainAccount {
	if x != nil {
		return x.Blockchainaccounts
	}
	return nil
}

type DeleteBlockchainAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Schemaname    string                 `protobuf:"bytes,2,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBlockchainAccountRequest) Reset() {
	*x = DeleteBlockchainAccountRequest{}
	mi := &file_sc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBlockchainAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlockchainAccountRequest) ProtoMessage() {}

func (x *DeleteBlockchainAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlockchainAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteBlockchainAccountRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteBlockchainAccountRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteBlockchainAccountRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

type DeleteBlockchainAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBlockchainAccountResponse) Reset() {
	*x = DeleteBlockchainAccountResponse{}
	mi := &file_sc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBlockchainAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlockchainAccountResponse) ProtoMessage() {}

func (x *DeleteBlockchainAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlockchainAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteBlockchainAccountResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteBlockchainAccountResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DeleteBlockchainAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateBlockchainAccountRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Schemaname         string                 `protobuf:"bytes,1,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	Blockchainaccounts []*BlockchainAccount   `protobuf:"bytes,2,rep,name=blockchainaccounts,proto3" json:"blockchainaccounts,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateBlockchainAccountRequest) Reset() {
	*x = UpdateBlockchainAccountRequest{}
	mi := &file_sc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBlockchainAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlockchainAccountRequest) ProtoMessage() {}

func (x *UpdateBlockchainAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlockchainAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateBlockchainAccountRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateBlockchainAccountRequest) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

func (x *UpdateBlockchainAccountRequest) GetBlockchainaccounts() []*BlockchainAccount {
	if x != nil {
		return x.Blockchainaccounts
	}
	return nil
}

type UpdateBlockchainAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Status        bool                   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBlockchainAccountResponse) Reset() {
	*x = UpdateBlockchainAccountResponse{}
	mi := &file_sc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBlockchainAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlockchainAccountResponse) ProtoMessage() {}

func (x *UpdateBlockchainAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlockchainAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateBlockchainAccountResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateBlockchainAccountResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateBlockchainAccountResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// ==================================
type BCNetwork struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ChainId       int64                  `protobuf:"varint,2,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	RPCURL        string                 `protobuf:"bytes,3,opt,name=RPCURL,proto3" json:"RPCURL,omitempty"`
	ExplorerURL   string                 `protobuf:"bytes,4,opt,name=ExplorerURL,proto3" json:"ExplorerURL,omitempty"`
	Symbol        string                 `protobuf:"bytes,5,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Type          NetworkType            `protobuf:"varint,6,opt,name=Type,proto3,enum=sc_service.NetworkType" json:"Type,omitempty"`
	Activate      bool                   `protobuf:"varint,7,opt,name=Activate,proto3" json:"Activate,omitempty"`
	Available     bool                   `protobuf:"varint,8,opt,name=Available,proto3" json:"Available,omitempty"`
	Id            uint32                 `protobuf:"varint,9,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BCNetwork) Reset() {
	*x = BCNetwork{}
	mi := &file_sc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BCNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BCNetwork) ProtoMessage() {}

func (x *BCNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BCNetwork.ProtoReflect.Descriptor instead.
func (*BCNetwork) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{43}
}

func (x *BCNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BCNetwork) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *BCNetwork) GetRPCURL() string {
	if x != nil {
		return x.RPCURL
	}
	return ""
}

func (x *BCNetwork) GetExplorerURL() string {
	if x != nil {
		return x.ExplorerURL
	}
	return ""
}

func (x *BCNetwork) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BCNetwork) GetType() NetworkType {
	if x != nil {
		return x.Type
	}
	return NetworkType_mainnet
}

func (x *BCNetwork) GetActivate() bool {
	if x != nil {
		return x.Activate
	}
	return false
}

func (x *BCNetwork) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *BCNetwork) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateBCNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       []*BCNetwork           `protobuf:"bytes,1,rep,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBCNetworkRequest) Reset() {
	*x = CreateBCNetworkRequest{}
	mi := &file_sc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBCNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBCNetworkRequest) ProtoMessage() {}

func (x *CreateBCNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBCNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateBCNetworkRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{44}
}

func (x *CreateBCNetworkRequest) GetNetwork() []*BCNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

type CreateBCNetworkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBCNetworkResponse) Reset() {
	*x = CreateBCNetworkResponse{}
	mi := &file_sc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBCNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBCNetworkResponse) ProtoMessage() {}

func (x *CreateBCNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBCNetworkResponse.ProtoReflect.Descriptor instead.
func (*CreateBCNetworkResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{45}
}

func (x *CreateBCNetworkResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CreateBCNetworkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetBCNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkName   string                 `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBCNetworkRequest) Reset() {
	*x = GetBCNetworkRequest{}
	mi := &file_sc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBCNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBCNetworkRequest) ProtoMessage() {}

func (x *GetBCNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBCNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetBCNetworkRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{46}
}

func (x *GetBCNetworkRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type GetBCNetworkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       []*BCNetwork           `protobuf:"bytes,1,rep,name=network,proto3" json:"network,omitempty"`
	Status        bool                   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBCNetworkResponse) Reset() {
	*x = GetBCNetworkResponse{}
	mi := &file_sc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBCNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBCNetworkResponse) ProtoMessage() {}

func (x *GetBCNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBCNetworkResponse.ProtoReflect.Descriptor instead.
func (*GetBCNetworkResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{47}
}

func (x *GetBCNetworkResponse) GetNetwork() []*BCNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *GetBCNetworkResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *GetBCNetworkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateBCNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Network       *BCNetwork             `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBCNetworkRequest) Reset() {
	*x = UpdateBCNetworkRequest{}
	mi := &file_sc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBCNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBCNetworkRequest) ProtoMessage() {}

func (x *UpdateBCNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBCNetworkRequest.ProtoReflect.Descriptor instead.
func (*UpdateBCNetworkRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateBCNetworkRequest) GetNetwork() *BCNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

type UpdateBCNetworkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBCNetworkResponse) Reset() {
	*x = UpdateBCNetworkResponse{}
	mi := &file_sc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBCNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBCNetworkResponse) ProtoMessage() {}

func (x *UpdateBCNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBCNetworkResponse.ProtoReflect.Descriptor instead.
func (*UpdateBCNetworkResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateBCNetworkResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *UpdateBCNetworkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteNetworkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkId     int32                  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNetworkRequest) Reset() {
	*x = DeleteNetworkRequest{}
	mi := &file_sc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkRequest) ProtoMessage() {}

func (x *DeleteNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkRequest.ProtoReflect.Descriptor instead.
func (*DeleteNetworkRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteNetworkRequest) GetNetworkId() int32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

type DeleteNetworkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNetworkResponse) Reset() {
	*x = DeleteNetworkResponse{}
	mi := &file_sc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkResponse) ProtoMessage() {}

func (x *DeleteNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNetworkResponse.ProtoReflect.Descriptor instead.
func (*DeleteNetworkResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteNetworkResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DeleteNetworkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Struktur Sekolah
//
//	message Sekolah {
//	  int32 sekolah_id = 1;
//	  string sekolah_id_enkrip = 2;
//	  string kecamatan = 3;
//	  string kabupaten = 4;
//	  string propinsi = 5;
//	  string kode_kecamatan = 6;
//	  string kode_kab = 7;
//	  string kode_prop = 8;
//	  string nama_sekolah = 9;
//	  string npsn = 10;
//	  string alamat_jalan = 11;
//	  string status = 12;
//	}
type SekolahTenant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamaSekolah   string                 `protobuf:"bytes,1,opt,name=nama_sekolah,json=namaSekolah,proto3" json:"nama_sekolah,omitempty"`
	UserId        int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SekolahId     int32                  `protobuf:"varint,3,opt,name=sekolah_id,json=sekolahId,proto3" json:"sekolah_id,omitempty"`
	Schemaname    string                 `protobuf:"bytes,4,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SekolahTenant) Reset() {
	*x = SekolahTenant{}
	mi := &file_sc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SekolahTenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SekolahTenant) ProtoMessage() {}

func (x *SekolahTenant) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SekolahTenant.ProtoReflect.Descriptor instead.
func (*SekolahTenant) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{52}
}

func (x *SekolahTenant) GetNamaSekolah() string {
	if x != nil {
		return x.NamaSekolah
	}
	return ""
}

func (x *SekolahTenant) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SekolahTenant) GetSekolahId() int32 {
	if x != nil {
		return x.SekolahId
	}
	return 0
}

func (x *SekolahTenant) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

type RegistrasiSekolahTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SekolahTenant *SekolahTenant         `protobuf:"bytes,1,opt,name=sekolah_tenant,json=sekolahTenant,proto3" json:"sekolah_tenant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistrasiSekolahTenantRequest) Reset() {
	*x = RegistrasiSekolahTenantRequest{}
	mi := &file_sc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrasiSekolahTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrasiSekolahTenantRequest) ProtoMessage() {}

func (x *RegistrasiSekolahTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrasiSekolahTenantRequest.ProtoReflect.Descriptor instead.
func (*RegistrasiSekolahTenantRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{53}
}

func (x *RegistrasiSekolahTenantRequest) GetSekolahTenant() *SekolahTenant {
	if x != nil {
		return x.SekolahTenant
	}
	return nil
}

type RegistrasiSekolahTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Status        bool                   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistrasiSekolahTenantResponse) Reset() {
	*x = RegistrasiSekolahTenantResponse{}
	mi := &file_sc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrasiSekolahTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrasiSekolahTenantResponse) ProtoMessage() {}

func (x *RegistrasiSekolahTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrasiSekolahTenantResponse.ProtoReflect.Descriptor instead.
func (*RegistrasiSekolahTenantResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{54}
}

func (x *RegistrasiSekolahTenantResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistrasiSekolahTenantResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type GetSekolahTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SekolahId     int32                  `protobuf:"varint,1,opt,name=sekolah_id,json=sekolahId,proto3" json:"sekolah_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSekolahTenantRequest) Reset() {
	*x = GetSekolahTenantRequest{}
	mi := &file_sc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSekolahTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSekolahTenantRequest) ProtoMessage() {}

func (x *GetSekolahTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSekolahTenantRequest.ProtoReflect.Descriptor instead.
func (*GetSekolahTenantRequest) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{55}
}

func (x *GetSekolahTenantRequest) GetSekolahId() int32 {
	if x != nil {
		return x.SekolahId
	}
	return 0
}

type GetSekolahTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SekolahTenant *SekolahTenant         `protobuf:"bytes,1,opt,name=sekolah_tenant,json=sekolahTenant,proto3" json:"sekolah_tenant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSekolahTenantResponse) Reset() {
	*x = GetSekolahTenantResponse{}
	mi := &file_sc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSekolahTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSekolahTenantResponse) ProtoMessage() {}

func (x *GetSekolahTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSekolahTenantResponse.ProtoReflect.Descriptor instead.
func (*GetSekolahTenantResponse) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{56}
}

func (x *GetSekolahTenantResponse) GetSekolahTenant() *SekolahTenant {
	if x != nil {
		return x.SekolahTenant
	}
	return nil
}

var File_sc_proto protoreflect.FileDescriptor

var file_sc_proto_rawDesc = []byte{
	0x0a, 0x08, 0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x54, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x70,
	0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x70, 0x63,
	0x55, 0x72, 0x6c, 0x22, 0x2d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x54,
	0x48, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x2a, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x54, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x30, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x2f, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x6f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xec,
	0x01, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6a, 0x61, 0x7a, 0x61, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x61, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a,
	0x1c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6a, 0x61, 0x7a, 0x61, 0x68, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x62, 0x69, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x62, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x69, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xed, 0x01,
	0x0a, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x62, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x69, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a,
	0x21, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x56, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x62, 0x69, 0x22, 0x3f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x62, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x69, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x1a,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x36, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x36, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x01,
	0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x61, 0x5f, 0x73, 0x65, 0x6b, 0x6f, 0x6c,
	0x61, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x61, 0x53, 0x65,
	0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68,
	0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x6b, 0x72, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x49, 0x64, 0x45, 0x6e, 0x6b, 0x72, 0x69,
	0x70, 0x22, 0xe9, 0x02, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4b, 0x65, 0x79,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x43, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xa1, 0x01,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x53, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6b, 0x6f,
	0x6c, 0x61, 0x68, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x1f, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x76, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0x59, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x1f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x09, 0x42, 0x43, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x50, 0x43, 0x55, 0x52, 0x4c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x50, 0x43, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x49, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x4b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x43, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x79, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x4b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x61, 0x5f, 0x73,
	0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x61, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x62, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x73, 0x69, 0x53,
	0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x73, 0x69, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6b, 0x6f, 0x6c,
	0x61, 0x68, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6b, 0x6f, 0x6c,
	0x61, 0x68, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2a, 0x2b, 0x0a, 0x0d, 0x42, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x2a,
	0x34, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x10, 0x02, 0x32, 0x99, 0x10, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x09, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a,
	0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x11, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d,
	0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x54, 0x48, 0x12,
	0x1a, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x45, 0x54, 0x48, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x54, 0x48,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x74, 0x68,
	0x12, 0x84, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x73, 0x0a, 0x0c,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x73,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x49, 0x6a, 0x61, 0x7a, 0x61, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x27,
	0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x49, 0x6a, 0x61, 0x7a, 0x61, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6a, 0x61, 0x7a, 0x61,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x7b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x2e, 0x73, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a,
	0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x73,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12,
	0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x7d, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x24, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x11, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x66, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x7b, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0xb6, 0x06, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9f,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x9f, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x73,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x91, 0x04, 0x0a, 0x18, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22,
	0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x2e, 0x73, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x43, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x43, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x81,
	0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x22, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x43, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x7a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x43, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x32, 0xb2,
	0x02, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x73, 0x69, 0x53,
	0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x73, 0x69, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x73, 0x69,
	0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a,
	0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x73, 0x69, 0x2d, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x12, 0x82,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x2f, 0x73, 0x65, 0x6b, 0x6f, 0x6c, 0x61, 0x68, 0x2d, 0x74, 0x65, 0x72, 0x64, 0x61, 0x66,
	0x74, 0x61, 0x72, 0x42, 0x22, 0x5a, 0x20, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x73, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sc_proto_rawDescOnce sync.Once
	file_sc_proto_rawDescData = file_sc_proto_rawDesc
)

func file_sc_proto_rawDescGZIP() []byte {
	file_sc_proto_rawDescOnce.Do(func() {
		file_sc_proto_rawDescData = protoimpl.X.CompressGZIP(file_sc_proto_rawDescData)
	})
	return file_sc_proto_rawDescData
}

var file_sc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sc_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_sc_proto_goTypes = []any{
	(BCAccountType)(0),                        // 0: sc_service.BCAccountType
	(NetworkType)(0),                          // 1: sc_service.NetworkType
	(*Empty)(nil),                             // 2: sc_service.Empty
	(*SetConfigRequest)(nil),                  // 3: sc_service.SetConfigRequest
	(*SetConfigResponse)(nil),                 // 4: sc_service.SetConfigResponse
	(*NetworkIDResponse)(nil),                 // 5: sc_service.NetworkIDResponse
	(*SendETHRequest)(nil),                    // 6: sc_service.SendETHRequest
	(*SendETHResponse)(nil),                   // 7: sc_service.SendETHResponse
	(*GetTokenBalanceRequest)(nil),            // 8: sc_service.GetTokenBalanceRequest
	(*GetTokenBalanceResponse)(nil),           // 9: sc_service.GetTokenBalanceResponse
	(*TransferTokenRequest)(nil),              // 10: sc_service.TransferTokenRequest
	(*TransferTokenResponse)(nil),             // 11: sc_service.TransferTokenResponse
	(*ApproveTokenRequest)(nil),               // 12: sc_service.ApproveTokenRequest
	(*ApproveTokenResponse)(nil),              // 13: sc_service.ApproveTokenResponse
	(*GetTokenAllowanceRequest)(nil),          // 14: sc_service.GetTokenAllowanceRequest
	(*GetTokenAllowanceResponse)(nil),         // 15: sc_service.GetTokenAllowanceResponse
	(*DeployIjazahContractRequest)(nil),       // 16: sc_service.DeployIjazahContractRequest
	(*DeployIjazahContractResponse)(nil),      // 17: sc_service.DeployIjazahContractResponse
	(*GetContractRequest)(nil),                // 18: sc_service.GetContractRequest
	(*GetContractResponse)(nil),               // 19: sc_service.GetContractResponse
	(*CallContractMethodRequest)(nil),         // 20: sc_service.CallContractMethodRequest
	(*SendTransactionToContractRequest)(nil),  // 21: sc_service.SendTransactionToContractRequest
	(*SendTransactionToContractResponse)(nil), // 22: sc_service.SendTransactionToContractResponse
	(*GetContractOwnerRequest)(nil),           // 23: sc_service.GetContractOwnerRequest
	(*GetContractOwnerResponse)(nil),          // 24: sc_service.GetContractOwnerResponse
	(*GetContractEventsRequest)(nil),          // 25: sc_service.GetContractEventsRequest
	(*GetContractEventsResponse)(nil),         // 26: sc_service.GetContractEventsResponse
	(*CallContractMethodResponse)(nil),        // 27: sc_service.CallContractMethodResponse
	(*GetGasPriceResponse)(nil),               // 28: sc_service.GetGasPriceResponse
	(*GetNonceRequest)(nil),                   // 29: sc_service.GetNonceRequest
	(*GetNonceResponse)(nil),                  // 30: sc_service.GetNonceResponse
	(*GetTransactionStatusRequest)(nil),       // 31: sc_service.GetTransactionStatusRequest
	(*GetTransactionStatusResponse)(nil),      // 32: sc_service.GetTransactionStatusResponse
	(*AdminSekolah)(nil),                      // 33: sc_service.AdminSekolah
	(*BlockchainAccount)(nil),                 // 34: sc_service.BlockchainAccount
	(*CreateBlockchainAccountRequest)(nil),    // 35: sc_service.CreateBlockchainAccountRequest
	(*CreateBlockchainAccountResponse)(nil),   // 36: sc_service.CreateBlockchainAccountResponse
	(*ImportBlockchainAccountRequest)(nil),    // 37: sc_service.ImportBlockchainAccountRequest
	(*ImportBlockchainAccountResponse)(nil),   // 38: sc_service.ImportBlockchainAccountResponse
	(*GetBlockchainAccountsRequest)(nil),      // 39: sc_service.GetBlockchainAccountsRequest
	(*GetBlockchainAccountsResponse)(nil),     // 40: sc_service.GetBlockchainAccountsResponse
	(*DeleteBlockchainAccountRequest)(nil),    // 41: sc_service.DeleteBlockchainAccountRequest
	(*DeleteBlockchainAccountResponse)(nil),   // 42: sc_service.DeleteBlockchainAccountResponse
	(*UpdateBlockchainAccountRequest)(nil),    // 43: sc_service.UpdateBlockchainAccountRequest
	(*UpdateBlockchainAccountResponse)(nil),   // 44: sc_service.UpdateBlockchainAccountResponse
	(*BCNetwork)(nil),                         // 45: sc_service.BCNetwork
	(*CreateBCNetworkRequest)(nil),            // 46: sc_service.CreateBCNetworkRequest
	(*CreateBCNetworkResponse)(nil),           // 47: sc_service.CreateBCNetworkResponse
	(*GetBCNetworkRequest)(nil),               // 48: sc_service.GetBCNetworkRequest
	(*GetBCNetworkResponse)(nil),              // 49: sc_service.GetBCNetworkResponse
	(*UpdateBCNetworkRequest)(nil),            // 50: sc_service.UpdateBCNetworkRequest
	(*UpdateBCNetworkResponse)(nil),           // 51: sc_service.UpdateBCNetworkResponse
	(*DeleteNetworkRequest)(nil),              // 52: sc_service.DeleteNetworkRequest
	(*DeleteNetworkResponse)(nil),             // 53: sc_service.DeleteNetworkResponse
	(*SekolahTenant)(nil),                     // 54: sc_service.SekolahTenant
	(*RegistrasiSekolahTenantRequest)(nil),    // 55: sc_service.RegistrasiSekolahTenantRequest
	(*RegistrasiSekolahTenantResponse)(nil),   // 56: sc_service.RegistrasiSekolahTenantResponse
	(*GetSekolahTenantRequest)(nil),           // 57: sc_service.GetSekolahTenantRequest
	(*GetSekolahTenantResponse)(nil),          // 58: sc_service.GetSekolahTenantResponse
}
var file_sc_proto_depIdxs = []int32{
	0,  // 0: sc_service.DeployIjazahContractRequest.acount_type:type_name -> sc_service.BCAccountType
	0,  // 1: sc_service.BlockchainAccount.Type:type_name -> sc_service.BCAccountType
	45, // 2: sc_service.BlockchainAccount.Network:type_name -> sc_service.BCNetwork
	33, // 3: sc_service.CreateBlockchainAccountRequest.admin:type_name -> sc_service.AdminSekolah
	45, // 4: sc_service.CreateBlockchainAccountRequest.network:type_name -> sc_service.BCNetwork
	33, // 5: sc_service.ImportBlockchainAccountRequest.admin:type_name -> sc_service.AdminSekolah
	45, // 6: sc_service.ImportBlockchainAccountRequest.network:type_name -> sc_service.BCNetwork
	34, // 7: sc_service.GetBlockchainAccountsResponse.blockchainaccounts:type_name -> sc_service.BlockchainAccount
	34, // 8: sc_service.UpdateBlockchainAccountRequest.blockchainaccounts:type_name -> sc_service.BlockchainAccount
	1,  // 9: sc_service.BCNetwork.Type:type_name -> sc_service.NetworkType
	45, // 10: sc_service.CreateBCNetworkRequest.network:type_name -> sc_service.BCNetwork
	45, // 11: sc_service.GetBCNetworkResponse.network:type_name -> sc_service.BCNetwork
	45, // 12: sc_service.UpdateBCNetworkRequest.network:type_name -> sc_service.BCNetwork
	54, // 13: sc_service.RegistrasiSekolahTenantRequest.sekolah_tenant:type_name -> sc_service.SekolahTenant
	54, // 14: sc_service.GetSekolahTenantResponse.sekolah_tenant:type_name -> sc_service.SekolahTenant
	3,  // 15: sc_service.BlockchainService.SetConfig:input_type -> sc_service.SetConfigRequest
	2,  // 16: sc_service.BlockchainService.GetNetworkID:input_type -> sc_service.Empty
	6,  // 17: sc_service.BlockchainService.SendETH:input_type -> sc_service.SendETHRequest
	8,  // 18: sc_service.BlockchainService.GetTokenBalance:input_type -> sc_service.GetTokenBalanceRequest
	10, // 19: sc_service.BlockchainService.TransferToken:input_type -> sc_service.TransferTokenRequest
	12, // 20: sc_service.BlockchainService.ApproveToken:input_type -> sc_service.ApproveTokenRequest
	14, // 21: sc_service.BlockchainService.GetTokenAllowance:input_type -> sc_service.GetTokenAllowanceRequest
	16, // 22: sc_service.BlockchainService.DeployIjazahContract:input_type -> sc_service.DeployIjazahContractRequest
	18, // 23: sc_service.BlockchainService.GetContract:input_type -> sc_service.GetContractRequest
	20, // 24: sc_service.BlockchainService.CallContractMethod:input_type -> sc_service.CallContractMethodRequest
	21, // 25: sc_service.BlockchainService.SendTransactionToContract:input_type -> sc_service.SendTransactionToContractRequest
	23, // 26: sc_service.BlockchainService.GetContractOwner:input_type -> sc_service.GetContractOwnerRequest
	25, // 27: sc_service.BlockchainService.GetContractEvents:input_type -> sc_service.GetContractEventsRequest
	2,  // 28: sc_service.BlockchainService.GetGasPrice:input_type -> sc_service.Empty
	29, // 29: sc_service.BlockchainService.GetNonce:input_type -> sc_service.GetNonceRequest
	31, // 30: sc_service.BlockchainService.GetTransactionStatus:input_type -> sc_service.GetTransactionStatusRequest
	35, // 31: sc_service.BlockchainAccountService.CreateBlockchainAccount:input_type -> sc_service.CreateBlockchainAccountRequest
	37, // 32: sc_service.BlockchainAccountService.ImportBlockchainAccount:input_type -> sc_service.ImportBlockchainAccountRequest
	39, // 33: sc_service.BlockchainAccountService.GetBlockchainAccounts:input_type -> sc_service.GetBlockchainAccountsRequest
	43, // 34: sc_service.BlockchainAccountService.UpdateBlockchainAccount:input_type -> sc_service.UpdateBlockchainAccountRequest
	41, // 35: sc_service.BlockchainAccountService.DeleteBlockchainAccount:input_type -> sc_service.DeleteBlockchainAccountRequest
	46, // 36: sc_service.BlockchainNetworkService.CreateBCNetwork:input_type -> sc_service.CreateBCNetworkRequest
	48, // 37: sc_service.BlockchainNetworkService.GetBCNetwork:input_type -> sc_service.GetBCNetworkRequest
	50, // 38: sc_service.BlockchainNetworkService.UpdateBCNetwork:input_type -> sc_service.UpdateBCNetworkRequest
	52, // 39: sc_service.BlockchainNetworkService.DeleteBCNetwork:input_type -> sc_service.DeleteNetworkRequest
	55, // 40: sc_service.TenantService.RegistrasiSekolahTenant:input_type -> sc_service.RegistrasiSekolahTenantRequest
	57, // 41: sc_service.TenantService.GetSekolahTenant:input_type -> sc_service.GetSekolahTenantRequest
	4,  // 42: sc_service.BlockchainService.SetConfig:output_type -> sc_service.SetConfigResponse
	5,  // 43: sc_service.BlockchainService.GetNetworkID:output_type -> sc_service.NetworkIDResponse
	7,  // 44: sc_service.BlockchainService.SendETH:output_type -> sc_service.SendETHResponse
	9,  // 45: sc_service.BlockchainService.GetTokenBalance:output_type -> sc_service.GetTokenBalanceResponse
	11, // 46: sc_service.BlockchainService.TransferToken:output_type -> sc_service.TransferTokenResponse
	13, // 47: sc_service.BlockchainService.ApproveToken:output_type -> sc_service.ApproveTokenResponse
	15, // 48: sc_service.BlockchainService.GetTokenAllowance:output_type -> sc_service.GetTokenAllowanceResponse
	17, // 49: sc_service.BlockchainService.DeployIjazahContract:output_type -> sc_service.DeployIjazahContractResponse
	19, // 50: sc_service.BlockchainService.GetContract:output_type -> sc_service.GetContractResponse
	27, // 51: sc_service.BlockchainService.CallContractMethod:output_type -> sc_service.CallContractMethodResponse
	22, // 52: sc_service.BlockchainService.SendTransactionToContract:output_type -> sc_service.SendTransactionToContractResponse
	24, // 53: sc_service.BlockchainService.GetContractOwner:output_type -> sc_service.GetContractOwnerResponse
	26, // 54: sc_service.BlockchainService.GetContractEvents:output_type -> sc_service.GetContractEventsResponse
	28, // 55: sc_service.BlockchainService.GetGasPrice:output_type -> sc_service.GetGasPriceResponse
	30, // 56: sc_service.BlockchainService.GetNonce:output_type -> sc_service.GetNonceResponse
	32, // 57: sc_service.BlockchainService.GetTransactionStatus:output_type -> sc_service.GetTransactionStatusResponse
	36, // 58: sc_service.BlockchainAccountService.CreateBlockchainAccount:output_type -> sc_service.CreateBlockchainAccountResponse
	38, // 59: sc_service.BlockchainAccountService.ImportBlockchainAccount:output_type -> sc_service.ImportBlockchainAccountResponse
	40, // 60: sc_service.BlockchainAccountService.GetBlockchainAccounts:output_type -> sc_service.GetBlockchainAccountsResponse
	44, // 61: sc_service.BlockchainAccountService.UpdateBlockchainAccount:output_type -> sc_service.UpdateBlockchainAccountResponse
	42, // 62: sc_service.BlockchainAccountService.DeleteBlockchainAccount:output_type -> sc_service.DeleteBlockchainAccountResponse
	47, // 63: sc_service.BlockchainNetworkService.CreateBCNetwork:output_type -> sc_service.CreateBCNetworkResponse
	49, // 64: sc_service.BlockchainNetworkService.GetBCNetwork:output_type -> sc_service.GetBCNetworkResponse
	51, // 65: sc_service.BlockchainNetworkService.UpdateBCNetwork:output_type -> sc_service.UpdateBCNetworkResponse
	53, // 66: sc_service.BlockchainNetworkService.DeleteBCNetwork:output_type -> sc_service.DeleteNetworkResponse
	56, // 67: sc_service.TenantService.RegistrasiSekolahTenant:output_type -> sc_service.RegistrasiSekolahTenantResponse
	58, // 68: sc_service.TenantService.GetSekolahTenant:output_type -> sc_service.GetSekolahTenantResponse
	42, // [42:69] is the sub-list for method output_type
	15, // [15:42] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_sc_proto_init() }
func file_sc_proto_init() {
	if File_sc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_sc_proto_goTypes,
		DependencyIndexes: file_sc_proto_depIdxs,
		EnumInfos:         file_sc_proto_enumTypes,
		MessageInfos:      file_sc_proto_msgTypes,
	}.Build()
	File_sc_proto = out.File
	file_sc_proto_rawDesc = nil
	file_sc_proto_goTypes = nil
	file_sc_proto_depIdxs = nil
}
